{"meta":{"title":"baiQstar的博客","subtitle":"","description":"","author":"白易安","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"六，常见的网络拓扑结构","slug":"六，常见的网络拓扑结构","date":"2023-11-08T12:07:41.000Z","updated":"2023-11-08T12:23:31.899Z","comments":true,"path":"2023/11/08/六，常见的网络拓扑结构/","permalink":"http://example.com/2023/11/08/%E5%85%AD%EF%BC%8C%E5%B8%B8%E8%A7%81%E7%9A%84%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E7%BB%93%E6%9E%84/","excerpt":"","text":"常见的网络拓扑结构有以下6种：1.总线型网络拓扑结构；2.星型网络拓扑结构；3.环形网络拓扑结构；4.树型网络拓扑结构；5.网状网络拓扑结构；6.混合网络型拓扑结构。 1.总线型网络拓扑结构​ 总线型结构是将网络中的所有设备通过相应的硬件接口直接连接到公共总线上，结点之间按广播方式通信，一个结点发出的信息，总线上的其它结点均可“收听”到。 总线型结构就像一张树叶,有一条主干线,主干线上面由很多分支。总线型拓扑结构图如下: 优点： 结构简单，可扩充性好； 当需要增加节点时，只需要在总线上增加一个分支接口便可与分支节点相连，当总线负载不允许时还可以扩充总线； 缺点： 维护难，分支节点故障查找难。 这种网络因为各节点是共用总线带宽的，所以在传输速度上会随着接入网络的用户的增多而下降； 2.星型网络拓扑结构​ 星型结构是一种以中央节点为中心，把若干外围节点连接起来的辐射式互联结构。这种结构适用于局域网，特别是近年来连接的局域网大都采用这种连接方式。这种连接方式以双绞线或同轴电缆作连接线路。星型拓扑结构图如下: 优点： 控制简单。任何一站点只和中央节点相连接，因而介质访问控制方法简单，致使访问协议也十分简单。易于网络监控和管理。 故障诊断和隔离容易。中央节点对连接线路可以逐一隔离进行故障检测和定位，单个连接点的故障只影响一个设备，不会影响全网。 3.环形网络拓扑结构​ 环形结构各结点通过通信线路组成闭合回路，环中数据只能单向传输，信息在每台设备上的延时时间是固定的，特别适合实时控制的局域网系统。环形结构就如一串珍珠项链,环形结构上的每台计算机就是项链上的一个个珠子。环形拓扑结构图如下: 特点： 信息流在网中是沿着固定方向流动的，两个节点仅有一条道路，故简化了路径选择的控制； 环路上各节点都是自主控制，故控制软件简单； 由于信息源在环路中是串行地穿过各个节点，当环中节点过多时，势必影响信息传输速率，使网络的响应时间延长； 4.树型网络拓扑结构​ 树型拓扑结构是一种层次结构，结点按层次连结，信息交换主要在上下结点之间进行，相邻结点或同层结点之间一般不进行数据交换。树型拓扑结构是就是数据结构中的树。树型拓扑结构图如下: 特点： ● 网络结构简单，便于管理；● 控制简单，建网容易；● 网络延迟时间较短，误码率较低；● 网络共享能力较差；● 通信线路利用率不高；● 中央结点负荷太重。 三层结构分为核心层，汇聚层和接入层， 接入层：无线网络发射器，AP（提供接入网络的接口）汇聚层：楼层交换机、建筑物交换机（汇聚接入层设备）核心层：核心交换机（数据高速转发） 5.网状网络拓扑结构​ 网络拓扑结构又称作无规则结构，结点之间的联结是任意的，没有规律。网状拓扑结构图如下: 特点如下：●网络可靠性高，一般通信子网中任意两个节点交换机之间，存在着两条或两条以上的通信路径，这样，当一条路径发生故障时，还可以通过另一条路径把信息送至节点交换机。●网络可组建成各种形状，采用多种通信信道，多种传输速率。●网内节点共享资源容易。●可改善线路的信息流量分配。●可选择最佳路径，传输延迟小。 6.混合网络型拓扑结构​ 混合型网络拓扑结构就是指同时使用上面的5种网络拓扑结构种两种或两种以上的网络拓扑结构。这种网络拓扑结构是由星型结构和总线型结构的网络结合在一起的网络结构，这样的拓扑结构更能满足较大网络的拓展，解决星型网络在传输距离上的局限，而同时又解决了总线型网络在连接用户数量的限制。这种网络拓扑结构同时兼顾了星型网与总线型网络的优点，在缺点方面得到了一定的弥补。 特点： 应用广泛 扩展灵活 性能差 较难维护","categories":[],"tags":[]},{"title":"五，VMware的三种网络连接模式","slug":"五，VMware的三种网络连接模式","date":"2023-11-08T11:47:27.000Z","updated":"2023-11-08T12:06:30.949Z","comments":true,"path":"2023/11/08/五，VMware的三种网络连接模式/","permalink":"http://example.com/2023/11/08/%E4%BA%94%EF%BC%8CVMware%E7%9A%84%E4%B8%89%E7%A7%8D%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"安装完成vmware以后进入虚拟机—&gt;&gt;设置—&gt;&gt;网络适配器 ​ 在网络适配器中可以发现vmware为我们提供了三种网络工作模式，它们分别是：1,Bridged（桥接模式）直接连接物理网络2,NAT（网络地址转换模式）与主机共享IP地址3,Host-Only（仅主机模式）与主机共享的专用网络 VMnet0表示的是用于桥接模式下的虚拟交换机； VMnet1表示的是用于仅主机模式下的虚拟交换机； VMnet8表示的是用于NAT模式下的虚拟交换机； Bridged（桥接模式）​ 桥接模式就是将主机网卡与虚拟机虚拟的网卡利用虚拟网桥进行通信。在桥接的作用下，类似于把物理主机虚拟为一个交换机，所有桥接设置的虚拟机连接到这个交换机的一个接口上，物理主机也同样插在这个交换机当中，所以所有桥接下的网卡与网卡都是交换模式的，相互可以访问而不干扰。在桥接模式下，虚拟机ip地址需要与主机在同一个网段，如果需要联网，则网关与DNS需要与主机网卡一致。 其网络结构如下图所示： ​ 虚拟机可以连接外网，可以和同网段的其他真实物理主机之间相互访问呢，可以和相同模式的虚拟机之间相互访问。此模式用于ip地址资源比较充足的情况缺点：​ 但如果你的网络环境是ip资源很缺少或对ip管理比较严格的话，那桥接模式就不太适用了。 NAT（地址转换模式）NAT模式借助虚拟NAT设备和虚拟DHCP服务器，使得虚拟机可以联网。其网络结构如下图所示： ​ 在NAT模式中，主机网卡直接与虚拟NAT设备相连，然后虚拟NAT设备与虚拟DHCP服务器一起连接在虚拟交换机VMnet8上，这样就实现了虚拟机联网。 ​ 此时，虚拟机可以连接外网（NAT实现），可以和相同模式的虚拟机之间相互访问（同一交换机下），但不可以和同网段的其他真实物理主机之间相互访问（不同子网，且没有第三层路由器）。此模式用于ip地址资源比较稀缺的情况。 ​ 然后，将VMware Network Adapter VMnet8启用之后，发现远程工具可以连接上虚拟机了。那么，这就是NAT模式，利用虚拟的NAT设备以及虚拟DHCP服务器来使虚拟机连接外网，而VMware Network Adapter VMnet8虚拟网卡是用来与虚拟机通信的。 Host-Only（仅主机模式）​ Host-Only模式其实就是NAT模式去除了虚拟NAT设备，然后使用VMware Network Adapter VMnet1虚拟网卡连接VMnet1虚拟交换机来与虚拟机通信的，Host-Only模式将虚拟机与外网隔开，使得虚拟机成为一个独立的系统，只与主机相互通讯。其网络结构如下图所示： ipv4地址由32为二进制数组成，每四位用空格隔开，每八位用逗号隔开 私有地址范围：A段：10.0.0.0-10.255.255.255B段：172.16.0.0-172.31.255.255C段：192.168.0.0-192.168.255.255 https://myip.ipip.net 用于查看公网IP地址 子网掩码255.255.255.0标志前24位相同的数字在同一网络下，后8位是主机号前24位是网络号","categories":[],"tags":[]},{"title":"四，markdown语法","slug":"四，markdown语法","date":"2023-11-08T11:02:10.000Z","updated":"2023-11-08T11:45:31.829Z","comments":true,"path":"2023/11/08/四，markdown语法/","permalink":"http://example.com/2023/11/08/%E5%9B%9B%EF%BC%8Cmarkdown%E8%AF%AD%E6%B3%95/","excerpt":"","text":"标题：用#来表示格式，以#的数量表示标题的大小，效果如图： 字体设置斜体、粗体、删除线： 链接：1，插入图片链接： 格式为： 2，Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。也可以直接写，也是可以显示成链接形式的 分割线：可以在一行中用三个以上的星号(*)、减号(-)、底线(_)来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。 代码块：用三个~来表示格式，效果如下： 1main 引用：在被引用的文本前加上&gt;符号，以及一个空格就可以了，如果只输入了一个&gt;符号会产生一个空白的引用。 列表：1，无序列表 使用 *，+，- 表示无序列表。注意：符号后面一定要有一个空格，起到缩进的作用。 2，有序列表 使用数字和一个英文句点表示有序列表。注意：英文句点后面一定要有一个空格，起到缩进的作用。 3，无序列表和有序列表同时使用 表格： 换行：方法1: 连续两个以上空格+回车方法2：使用html语言换行标签： 缩进字符：、 特殊符号：","categories":[],"tags":[]},{"title":"三，Typora+PicGo+Github保证博客中图片显示","slug":"三，Typora-PicGo-Github保证博客中图片显示","date":"2023-11-08T03:11:38.000Z","updated":"2023-11-08T03:27:35.097Z","comments":true,"path":"2023/11/08/三，Typora-PicGo-Github保证博客中图片显示/","permalink":"http://example.com/2023/11/08/%E4%B8%89%EF%BC%8CTypora-PicGo-Github%E4%BF%9D%E8%AF%81%E5%8D%9A%E5%AE%A2%E4%B8%AD%E5%9B%BE%E7%89%87%E6%98%BE%E7%A4%BA/","excerpt":"","text":"为了方便写作，我们可以采用Typora+PicGo+Github的方案来搭建我们的博客写作环境。 Typora：它是一款轻便简洁的Markdown编辑器，支持即时渲染技术，即所写立刻所见，少了排版的时间，专注于文章内容的编辑。 PicGo:它是一个用于快速上传图片并获取图片 URL 链接的工具，支持多种图库。 Github:代码托管工具，除了代码，还可以用作图片存储。 在我们的博客写作中，可以达成这样的需求： 使用Markdown编辑博客 一篇博客发布多个平台 图片一次上传，处处引用 操作步骤： 安装好Typora和PicGo软件，并准备一个GitHub账号 登录Github并创建一个公开的仓库，需要注意仓库必须是公开的，否则无法预览。 设置token 点击右上角头像-settings，然后点击developer settings，点击personal access tokens。 点击tokens (classic)，点击create new token(classic) 设置权限 复制token PicGo配置Github图床 点击左边图床设置，选择GitHub图床，具体配置如下 设定仓库名，填写：GitHub名&#x2F;库名 分支，默认填main 设定Token，刚才保存的token令牌 指定存储路径，默认填img&#x2F; 自定义域名为https://cdn.jsdelivr.net/gh/你的github用户名/你的仓库名@分支（一般为main）/ 图床接入 接下来可以在 Typora中接入我们的图床了。 打开Typora，找到文件-&gt;偏好设置-&gt;图像 进行如下配置 6.上传图片 上传后图片就在GitHub中设置的仓库中的文件夹中了","categories":[],"tags":[]},{"title":"图片猫","slug":"图片猫","date":"2023-11-07T12:44:22.000Z","updated":"2023-11-08T02:31:56.984Z","comments":true,"path":"2023/11/07/图片猫/","permalink":"http://example.com/2023/11/07/%E5%9B%BE%E7%89%87%E7%8C%AB/","excerpt":"","text":"mao","categories":[],"tags":[]},{"title":"二，发布新增文章到博客","slug":"二，发布新增文章到博客","date":"2023-11-07T12:20:49.000Z","updated":"2023-11-07T12:28:05.218Z","comments":true,"path":"2023/11/07/二，发布新增文章到博客/","permalink":"http://example.com/2023/11/07/%E4%BA%8C%EF%BC%8C%E5%8F%91%E5%B8%83%E6%96%B0%E5%A2%9E%E6%96%87%E7%AB%A0%E5%88%B0%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"1，安装扩展： 1npm i hexo-deployer-git 2，新建文章： 1hexo new post &quot;我的第一篇博客&quot; 执行后会在C:\\MyBlog\\blog\\source_posts中新增一个文件夹和一个.md文件 一个用来存放你的图片等数据，另一个就是你的文章文件啦。 3，编写markdown文件 4，生成静态网页 1hexo g 5,查看本地预览效果 1hexo s 6,上传到github上 1hexo d 注意： 本地仓库在C:\\MyBlog\\blog\\public中 需要删除文件的话要先将本地文件删除后在上传同步一次GitHub","categories":[],"tags":[]},{"title":"","slug":"一，利用github搭建hexo博客","date":"2023-11-07T11:34:02.561Z","updated":"2023-11-08T02:37:30.997Z","comments":true,"path":"2023/11/07/一，利用github搭建hexo博客/","permalink":"http://example.com/2023/11/07/%E4%B8%80%EF%BC%8C%E5%88%A9%E7%94%A8github%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"一，利用github搭建hexo博客搭建前的准备： 提前安装好(node.js)[https://nodejs.org/en] 左边的那个 提前安装好(GIt)[https://git-scm.com/downloads] 提前注册好一个github账号 操作步骤： 在本地找个目录放博客源文件，路径不要有中文 在选定的目录中，右键Git Bash Here 使用npm命令安装Hexo，输入: 1234npm install -g hexo-cli #全局安装hexo-clihexo init blog #使用Hexo初始化一个新的博客项目名称为blogcd blog #进入blog文件夹hexo g #使用Hexo生成静态文件 回车构建好后出现如下效果图 按顺序执行以下三条命令便可查看网站雏形 123hexo new test_my_site #使用Hexo创建一个新的博客项目名称为test_my_sitehexo g #使用Hexo生成静态文件hexo s #使用Hexo启动本地服务器,可以进行网站预览 在浏览器中输入网址localhost:4000，效果图如下： 配置ssh 1cd ~/.ssh #检查本机已存在的ssh密钥 如果提示：No such file or directory 说明你是第一次使用git。 1ssh-keygen -t rsa -C “邮件地址” 然后连续3次回车，最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key key填写C:\\Users\\Administrator.ssh\\id_rsa.pub中的内容，填写钥匙名并创建 尝试ssh连接,测试是否成功 1ssh -T git@github.com # 注意邮箱地址不用改 如果提示Are you sure you want to continue connecting (yes&#x2F;no)?，输入yes，然后会看到下面这个，就算成功： 1Hi liuxianan! You’ve successfully authenticated, but GitHub does not provide shell access. 在选中的位置(blog目录下)打开cmd(以管理员身份) 1npm install hexo-deployer-git –save 在上一个Git Bash Here还需要继续配置 12git config --global user.name &quot;luozhixiaowo&quot;// 你的github用户名，非昵称git config --global user.email &quot;xxx@qq.com&quot;// 填写你的github注册邮箱 准备上传代码 在github上新建一个存储库，命名为github的用户名.github.io 编辑_config.yml文件，在最后改成这样 1234deploy: type: git repository: git@github.com:luozhixiaowo/luozhixiaowo.github.io.git branch: main 注意保持格式，缩进不对，会导致一会儿，上传不成功 最后上传 12hexo d每次上传成功之后，需要等待1-3分钟，用来刷新页面 在创建的存储库的设置中-pages-如图设置 最后在浏览器中输入网址baiQstar.github.io就可访问网站了 总结： 注意英文输入，命令含中文符号会报错 在设置用户名和邮箱时注意将—改为– 注意在blog文件夹中进行操作","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2023-11-07T07:22:12.264Z","updated":"2023-11-07T07:22:12.264Z","comments":true,"path":"2023/11/07/hello-world/","permalink":"http://example.com/2023/11/07/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}